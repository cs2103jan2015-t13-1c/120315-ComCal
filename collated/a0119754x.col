//@author: a0119754x



	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Add.cpp
	 */

// Add.cpp
// Implementation of functions in the Add class


#include "Add.h"

Add::Add() : Command() {
}

Add::~Add() {
}

bool Add::canFind(int index) {
	return ((index != std::string::npos) && (index != -1));
}

std::string Add::checkIfValid() {
	// Check if argument is valid
	
	if (!canFind(_l)) {
		_hasLocation = false;
	}
	if (!canFind(_s)) {
		_hasStartDate = false;
	}
	if (!canFind(_e)) {
		_hasEndDate = false;
	}
	if ((_hasStartDate) && (_d > _s)) {
		return "Invalid add command: Description should be given before start date/time";
	}
	if ((_hasEndDate) && (_d > _e)) {
		return "Invalid add command: Description should be given before end date/time";
	}
	if ((_hasLocation) && (_d > _l)) {
		return "Invalid add command: Description should be given before location";
	}
	if ((_hasStartDate) && (_hasEndDate) && (_s > _e)) {
		return "Invalid add command: Start date/time should be given before end date/time";
	}
	if ((_hasStartDate) && (_hasLocation) && (_s > _l)) {
		return "Invalid add command: Start date/time (" + typeConversions::intToString(_s) + ") should be given before location (" + typeConversions::intToString(_l) + ")";
	}
	if ((_hasEndDate) && (_hasLocation) && (_e > _l)) {
		return "Invalid add command: End date/time should be given before location";
	}

	_isValid = true;
	return "";
}

void Add::findDSEL() {
	_d = _argument.find(".d");

	_s = _argument.find(".s");
	if (!canFind(_s)) {
		_s = _argument.find(" from ");
		if (canFind(_s)) {
			_usesFrom = true;
		}
		else {
			_s = _argument.find(" on ");
			if (canFind(_s)) {
				_usesOn = true;
			}
		}
	}

	_e = _argument.find(".e");
	if (!canFind(_e)) {
		_e = _argument.find(" to ");
		if (canFind(_e)) {
			_usesTo = true;
		}
		else {
			_e = _argument.find(" by ");
			if (canFind(_e)) {
			_usesBy = true;
			}
		}
	}

	_l = _argument.find(".l");
	if (!canFind(_l)) {
		_l = _argument.find(" in ");
		if (canFind(_l)) {
			_usesIn = true;
		}
		else {
			_l = _argument.find(" at ");
			if (canFind(_l)) {
				_usesIn = true;
			}
		}
	}
}

void Add::getFourParameters() {
	int position;
	int length;

	position = (canFind(_d) ? _d + 3 : 0);

	if (_hasStartDate) {
		length = _s - position - (((_usesFrom) || (_usesOn)) ? 0 : 1);
	}
	else if (_hasEndDate) {
		length = _e - position - (((_usesTo) || (_usesBy)) ? 0 : 1);
	}
	else {
		length = _l - position - (_usesIn ? 0 : 1);
	}

	_description = _argument.substr(position, length);

	if (_hasStartDate) {
		if (_usesFrom) {
			position = _s + 6;
		}
		else if (_usesOn) {
			position = _s + 4;
		}
		else {
			position = _s + 3;
		}

		if (_hasEndDate) {
			if ((_usesTo) || (_usesBy)) {
				length = _e - position;
			}
			else {
				length = _e - position - 1;
			}
		}
		else {
			if (_usesIn) {
				length = _l - position;
			}
			else {
				length = _l - position - 1;
			}
		}

		_startDate = _argument.substr(position, length);
	}

	if (_hasEndDate) {
		if ((_usesTo) || (_usesBy)) {
			position = _e + 4;
		}
		else {
			position = _e + 3;
		}
		if (_usesIn) {
			length = _l - position;
		}
		else {
			length = _l - position - 1;
		}
		_endDate = _argument.substr(position, length);
	}
	
	if (_hasLocation) {
		if (_usesIn) {
			position = _l + 4;
		}
		else {
			position = _l + 3;
		}
		length = _argument.length() - position;
		_location = _argument.substr(position, length);
	}
}

std::string Add::execute(std::string argument) {
	// Delimiters used in the Add command:
	// 1) .d, _			(indicates description)
	// 2) .s, from, on	(indicates start date and time)
	// 3) .e, to, by	(indicates end date and time)
	// 4) .l, in, at	(indicates location)

	// Available add formats:
	// 1) All four delimiters in
	// 2) All four delimiters in, but there is no end date, only end time
	//    - End date will be set as the same as start date
	// 3) No start date and time
	// 4) No end date and time
	// 5) Neither start date and time nor end date and time
	// Location is now optional as well

	// string::find() returns string::npos if no matches are found
	// string::substr() takes in position and length as arguments

	_argument = argument;

	_isValid = false;
	_usesFrom = false;
	_usesOn = false; // Used because all the delimiters are of length 2,
	_usesTo = false; // other than _ for description which is 0,
	_usesBy = false; // "on", "to", "by", "in", which is 4,
	_usesIn = false; // "from", which is 6
	_hasStartDate = true;
	_hasEndDate = true;
	_hasLocation = true;

	_description = "";
	_startDate = "";
	_endDate = "";
	_location = "";

	findDSEL();

	std::string errorMessage = checkIfValid();
	if (!_isValid)
		return errorMessage;

	getFourParameters();

	Date* objStartDate = NULL;
	Date* objEndDate = NULL;
	if (_hasStartDate) {
		objStartDate = new Date();
		if (!objStartDate->setDate(_startDate)) {
			delete objStartDate;
			return "Invalid add command: Invalid start date and time format (please enter: DD/MM/YYYY HHMM)";
		}
	}
	if (_hasEndDate) {
		objEndDate = new Date();
		if (!objEndDate->setDate(_endDate, objStartDate)) {
			delete objEndDate;
			return "Invalid add command: Invalid end date and time format (please enter: DD/MM/YYYY HHMM)";
		}
	}

	if ((_hasStartDate) && (_hasEndDate)) {
		if (*objStartDate > *objEndDate) {
			delete objStartDate;
			delete objEndDate;
			return "Invalid add command: End date must be later than time date";
		}
	}

	_addedTask = new Task(_description, _location, objStartDate, objEndDate);
	TextStorage::getInstance()->addTask(_addedTask);

	_taskIndex = TextStorage::getInstance()->getNumberOfTasks();

	return ("Added: " + _addedTask->toString());
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Add.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Add.h
	 */

// Add.h
// Subclass of Command; implements the add function

#pragma once

#include "Task.h"
#include "TextStorage.h"
#include "typeConversions.h"
#include "ComCalManager.h"
#include "Command.h"

#include <string>

class Add : public Command {
private:
	std::string _argument;

	int _d;
	int _s;
	int _e;
	int _l;
	int _taskIndex;
	Task* _addedTask;

	bool _isValid;
	bool _usesFrom;
	bool _usesOn;
	bool _usesTo;
	bool _usesBy;
	bool _usesIn;
	bool _hasLocation;
	bool _hasStartDate;
	bool _hasEndDate;

	std::string _description;
	std::string _startDate;
	std::string _endDate;
	std::string _location;

	bool canFind(int index);
	std::string checkIfValid();
	void findDSEL();
	void getFourParameters();
public:
	Add();
	~Add();
	std::string execute(std::string argument);
	std::string undo();
	std::string redo();
};
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Add.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ComCalManager.cpp
	 */

std::string ComCalManager::deduceCommand(std::string userInput) {
	_commands.push_back(userInput);
	resetCommandIndex();
	std::string feedBackMessage;

	int space = userInput.find(" ");
	std::string function = typeConversions::toLowerCase(userInput);
	std::string argument = "";

	if ((space != std::string::npos) && (space != -1)) {
		function = function.substr(0, space);
	}
	if ((space != std::string::npos) && (space != -1)) {
		argument = userInput.substr(space + 1);
	}

	Command* command;

	if (function.compare(COMMAND_ADD) == 0) {
		command = new Add();
		feedBackMessage = command->execute(argument);
		if (feedBackMessage.substr(0, 5) == "Added") {
			_commandHistory.push(command);
			populateSideBar();
		}
	}
	else if (function.compare(COMMAND_DELETE) == 0) {
		command = new Delete();
		feedBackMessage = command->execute(argument);
		_commandHistory.push(command);
		populateSideBar();
		while (!_undoHistory.empty()) {
			_undoHistory.pop();
		}
	}
	else if (function.compare(COMMAND_EDIT) == 0) {
		command = new Edit();
		feedBackMessage = command->execute(argument);
		_commandHistory.push(command);
		populateSideBar();
	}
	else if (function.compare(COMMAND_LOAD) == 0) {
		command = new Load();
		feedBackMessage = command->execute(argument);
		populateSideBar();
		while (!_commandHistory.empty()) {
			_commandHistory.pop();
		}
		while (!_undoHistory.empty()) {
			_undoHistory.pop();
		}
	}
	else if (function.compare(COMMAND_REDO) == 0) {
		if (!_undoHistory.empty()) {
			command = _undoHistory.top();
			_commandHistory.push(command);
			_undoHistory.pop();
			feedBackMessage = command->redo();
			populateSideBar();
		}
		else {
			feedBackMessage = "Error: No previous undo actions to redo.";
		}
	}
	else if (function.compare(COMMAND_SAVE) == 0) {
		command = new Save();
		feedBackMessage = command->execute(argument);
		populateSideBar();
	}
	else if (function.compare(COMMAND_SEARCH) == 0) {
		command = new Search();
		feedBackMessage = command->execute(argument);
		populateSideBar();
	}
	else if (function.compare(COMMAND_SHOW) == 0) {
		command = new Show();
		feedBackMessage = command->execute(argument);
		populateSideBar();
	}
	else if (function.compare(COMMAND_UNDO) == 0) {
		if (!_commandHistory.empty()) {
			command = _commandHistory.top();
			_undoHistory.push(command);
			_commandHistory.pop();
			feedBackMessage = command->undo();
			populateSideBar();
		}
		else {
			feedBackMessage = "Error: No previous actions to undo.";
		}
	}
	else if (function.compare(COMMAND_DONE) == 0) {
		command = new Done();
		feedBackMessage = command->execute(argument);
		populateSideBar();
	}
	else if (function.compare(COMMAND_UNDONE) == 0) {
		command = new Undone();
		feedBackMessage = command->execute(argument);
		populateSideBar();
	}
	else {
		feedBackMessage = INVALID_COMMAND;
	}

	return feedBackMessage;
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ComCalManager.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Command.cpp
	 */

#include "Command.h"

Command::Command() {
}

Command::~Command() {
}

std::string Command::execute(std::string) {
	std::string virtualString;
	return virtualString;
}

std::string Command::undo(void) {
	std::string virtualString;
	return virtualString;
}

std::string Command::redo(void) {
	std::string virtualString;
	return virtualString;
}
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Command.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Command.h
	 */

// Command.h
// Abstract class; used for Command subclasses to inherit

#pragma once

#include "Task.h"
#include <string>

class Command {
public:
	Command();
	~Command();
	virtual std::string execute(std::string argument);
	virtual std::string undo();
	virtual std::string redo();
};
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Command.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Date.cpp
	 */

// Date.cpp
// Implementation of functions in the Date class

#include "Date.h"

Date::Date(int day, int month, int year, int time) {
	if (year > 1900){
		year -= 1900;
	}

	_day = day;
	_month = month;
	_year = year;
	_time = time;
}

Date::Date() {
	_day = 0;
	_month = 0;
	_year = 0;
	_time = -1;
}

Date::~Date() {
}

// "DD/MM/YY HHRR"
std::string Date::toString() {
	return toGUIString() + toTimeString();
}

// "DD/MM/YY"
std::string Date::toGUIString(){
	std::string str = "";
	if (_day < 10) {
		str += "0";
	}
	str += typeConversions::intToString(_day) + "/";
	if (_month < 10) {
		str += "0";
	}
	str += typeConversions::intToString(_month) + "/" + typeConversions::intToString(_year + 1900);

	return str;
}

// " HHMM" if time exists and "" if it doesn't
std::string Date::toTimeString() {
	if (_time == -1) {
		return "";
	}
	std::string str = typeConversions::intToString(_time);
	while (str.size() < 4) {
		str = "0" + str;
	}
	return " " + str;
}

int Date::getDay() {
	return _day;
}

int Date::getMonth() {
	return _month;
}

int Date::getYear() {
	return _year;
}

int Date::getTime() {
	return _time;
}

time_t Date::getTimeT() {
	struct tm* dateTimeInfo = timeDateInfo::setStructTm();
	dateTimeInfo->tm_mday=_day;
	dateTimeInfo->tm_mon = _month-1;
	dateTimeInfo->tm_year = _year;

	return mktime(dateTimeInfo);
}

// Only makes sure same date; does not check time
bool Date::operator==(const Date &date) {
	if (_day != date._day) {
		return false;
	}
	if (_month != date._month) {
		return false;
	}
	if (_year != date._year) {
		return false;
	}
	return true;
}

bool Date::operator>(const Date &date) {
	if (_year > date._year) {
		return true;
	}
	if (_year < date._year) {
		return false;
	}
	if (_month > date._month) {
		return true;
	}
	if (_month < date._month) {
		return false;
	}
	if (_day > date._day) {
		return true;
	}
	if (_day < date._day) {
		return false;
	}
	if (_time > date._time) {
		return true;
	}
	return false;
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Date.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Date.cpp
	 */

bool Date::setDate(std::string date) {
	// Possible inputs for dates:
	// 1. DD/MM/YYYY
	//    - check by .find("/") twice
	// 2. "yesterday", "today", "tomorrow", "Monday", "Wednesday", "week" etc.
	//    - 1 and 2 have no spaces
	// 3. "next Wednesday", "last Friday", etc.
	//    - indicated by spaces
	// 4. "DD/MM/YYYY week", "next week", "last week", etc.
	//    - indicated by spaces
	// Input for time:
	// 1. Strictly HHMM in 24 hour format

	int space1 = date.find(" ");
	if (space1 == std::string::npos) { // No spaces. Either 1 or 2
		int slash1 = date.find("/");
		if (slash1 == std::string::npos) { // Input format number 2
			date = typeConversions::toLowerCase(date);
			if (date.compare(DATE_TODAY) == 0) {
				struct tm* currentTime = timeDateInfo::setStructTm();
				_day = currentTime->tm_mday;
				_month = currentTime->tm_mon + 1;
				_year = currentTime->tm_year;
			}
			else if (date.compare(DATE_YESTERDAY) == 0) {
				struct tm* currentTime = timeDateInfo::setStructTm();
				_day = currentTime->tm_mday - 1;
				if (_day == 0) {
					_month = currentTime->tm_mon;
					if (_month == 0) {
						_month = 12;
						_year=currentTime->tm_year-1;
					}
					else {
						_year = currentTime->tm_year;
					}
					_day = timeDateInfo::getDaysInMonth(_month, _year);
				}
				else {
					_month = currentTime->tm_mon + 1;
					_year = currentTime->tm_year;
				}
			}
			else if (date.compare(DATE_TOMORROW) == 0) {
				struct tm* currentTime = timeDateInfo::setStructTm();
				_day = currentTime->tm_mday + 1;
				if (_day > timeDateInfo::getDaysInMonth(currentTime->tm_mon, currentTime->tm_year)) {
					_month = currentTime->tm_mon + 2;
					if (_month > 12) {
						_month = 1;
						_year = currentTime->tm_year + 1;
					}
					else {
						_year = currentTime->tm_year;
					}
					_day = _day - timeDateInfo::getDaysInMonth(_month - 1, _year);
				}
				else {
					_month = currentTime->tm_mon + 1;
					_year = currentTime->tm_year;
				}
			}
			else if (date.compare(DATE_WEEK) == 0) {
				//For week: "week" will return the start date and time of the week
				struct tm* currentTime = timeDateInfo::setStructTm();
				int daysDifference = currentTime->tm_wday - 0;
				_day = currentTime->tm_mday - daysDifference;
				if (_day < 1) {
					_month = currentTime->tm_mon-1;
					if (_month == 0) {
						_month = 12;
						_year = currentTime->tm_year-1;
					}
					else {
						_year = currentTime->tm_year;
					}

					int numDaysInMonth = timeDateInfo::getDaysInMonth(_month - 1, _year);
					_day = numDaysInMonth + _day;
				}
				else {
					_month = currentTime->tm_mon + 1;
					_year = currentTime->tm_year;
				}
				_time = 0000;
			}
			else {
				//For day: e.g. "Monday", "Wednesday"
				int dayIndex;

				if (timeDateInfo::isDayValid(date, dayIndex)) {
					struct tm* currentTime = timeDateInfo::setStructTm();
					dayIndex = ((dayIndex + 2) / 2) - 1;
					int daysDifference = dayIndex - currentTime->tm_wday;
					_day = currentTime->tm_mday + daysDifference;

					if (_day < 1) {
						_month = currentTime->tm_mon - 1;
						if (_month == 0) {
							_month = 12;
							_year = currentTime->tm_year - 1;
						}
						else {
							_year = currentTime->tm_year;
						}

						int numDaysInMonth = timeDateInfo::getDaysInMonth(_month - 1, _year);
						_day = numDaysInMonth + _day;
					}
					else {
						_month = currentTime->tm_mon + 1;
						_year = currentTime->tm_year;
					}
				}
				else {
					// Check if current date is uninitialized. If it is, return false.
					if (!isDateDefined()) {
						return false;
					}
					// Else, it has been set a date already, so set the time
					if (!typeConversions::isNumber(date)) {
						return false;
					}
					_time = typeConversions::stringToInt(date);
					return true;
				}
			}
		}
		else { // Input format number 1
			int slash2 = date.find("/", slash1 + 1);
			if (slash2 == std::string::npos) {
				return false;
			}

			std::string tempString = date.substr(slash2 + 1); // YYYY
			if (!timeDateInfo::isYearValid(tempString)) {
				return false;
			}
			_year = typeConversions::stringToInt(tempString) - 1900;

			tempString = date.substr(slash1 + 1, slash2 - slash1 - 1); // MM
			if (!timeDateInfo::isMonthValid(tempString)) {
				return false;
			}
			_month = typeConversions::stringToInt(tempString);

			tempString = date.substr(0, slash1); // DD
			if (!timeDateInfo::isMdayValid(tempString, _month, _year + 1900)) {
				return false;
			}
			_day = typeConversions::stringToInt(tempString);
		}
	}
	else {
		int space2 = date.find(" ", space1 + 1);
		if (space2 == std::string::npos) { // Either 3 or 4 with no time, or 1 or 2 with time
			std::string time = date.substr(space1 + 1);
			if (timeDateInfo::isTimeValid(time)) { // 1 or 2 with time
				if (!setDate(date.substr(0, space1))) {
					return false;
				}
				if (!timeDateInfo::isTimeValid(time)) {
					return false;
				}
				_time = typeConversions::stringToInt(time);
			}
			else { // Either 3 or 4 with no time
				if (!setDate(date.substr(space1 + 1))) {
					return false;
				}

				if (typeConversions::toLowerCase(date.substr(0, space1)) == DATE_LAST) {
					_day -= 7;
					if (_day < 1) {
						_month--;
						if (_month < 1) {
							_month = 12;
							_year--;
						}

						int numDaysInMonth = timeDateInfo::getDaysInMonth(_month - 1, _year);
						_day = numDaysInMonth + _day;
					}
				}
				else if (typeConversions::toLowerCase(date.substr(0, space1)) == DATE_NEXT) {
					_day += 7;

					int numDaysInMonth = timeDateInfo::getDaysInMonth(_month - 1, _year);

					if (_day > numDaysInMonth) {
						_month++;
						if (_month > 12) {
							_month = 1;
							_year++;
						}

						_day = _day - numDaysInMonth;
					}
				}
				else if (typeConversions::toLowerCase(date.substr(space1+1)) == DATE_WEEK) {
					int lol = date.substr(space1+1).find("/");
					//For week specified with date: "DD/MM/YYYY week" will return the start date and time of the week containing the specified date
					if (!setDate(date.substr(0, space1))) {
						return false;
					}

					struct tm* dateTime = timeDateInfo::setStructTm();
					dateTime->tm_mday = _day;
					dateTime->tm_mon = _month - 1;
					dateTime->tm_year = _year;
					time_t dateTimeT = mktime(dateTime);
					localtime(&dateTimeT);

					int daysDifference = dateTime->tm_wday - 0;
					_day = _day - daysDifference;
					if (_day < 1) {
						_month--;
						if (_month < 1) {
							_month = 12;
							_year--;
						}

						int numDaysInMonth = timeDateInfo::getDaysInMonth(_month - 1, _year);
						_day = numDaysInMonth + _day;
					}
					_time = 0000;
				}
				else {
					return false;
				}
			}
		}
		else { // 3 with time
			if (!setDate(date.substr(0, space2))) {
				return false;
			}
			std::string time = date.substr(space2 + 1);
			if (!timeDateInfo::isTimeValid(time)){
				return false;
			}
			_time = typeConversions::stringToInt(time);
		}
	}

	return true;
}

// If the date string has no date, then set it to be the same as the date in start date
bool Date::setDate(std::string date, Date* startDate) {
	if (startDate != NULL) {
		_day = startDate->_day;
		_month = startDate->_month;
		_year = startDate->_year;
	}
	if (!setDate(date)) {
		return false;
	}
	return true;
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Date.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Date.h
	 */

// Date.h
// Contains the class that stores information about dates and times used in Task

#pragma once

#include "Exceptions.h"
#include "ErrorLog.h"
#include "typeConversions.h"
#include "keywords.h"
#include "timeDateInfo.h"

#include <string>

class Date {
private:
	int _day;	// Day of month
	int _month;	// Month of year, i.e. 1: Jan, 2: Feb,...
	int _year;	// Number of years since 1900
	int _time;	// In hhmm 24h time notation
public:
	Date(int day, int month, int year, int time);
	Date(); // For this constructor, use setDate() after creating object,
			// which returns boolean whether format is valid or invalid
	~Date();
	
	std::string toString();
	std::string toGUIString();
	std::string toTimeString();

	// Getter methods
	int getDay();
	int getMonth();
	int getYear();
	int getTime();
	time_t getTimeT();

	bool operator==(const Date &date); // Only makes sure same date; does not check time
	bool operator>(const Date &date);
	bool operator<=(const Date &date);
	bool operator>=(const Date &date);
	bool isDateDefined();

	// Setter methods
	bool setDate(std::string date);
	bool setDate(std::string date, Date* startDate);
	bool setTime(int);
	void setEndOfWeek();
	void setEndOfDay();
};
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Date.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\MonthForm.cpp
	 */

System::Void MonthForm::userEnter(System::Object^ sender, System::Windows::Forms::KeyEventArgs^ e) {
	String^ feedBack;

	if (_ctrlHeld) {
		if (e->KeyCode == Keys::D) {
			setCalendarDate_MonthForm(timeDateInfo::setStructTm());
			guiUpdate();
			feedBackBox->Text = MonthForm::convertstrToStr("show reset");
			userInputBox->Text = nullptr;
		}
		else if (e->KeyCode == Keys::Z) {
			// Undo
			ComCalManager* managerInstance = ComCalManager::getInstance();
			feedBack = MonthForm::convertstrToStr(managerInstance->deduceCommand("undo"));
			guiUpdate();
			feedBackBox->Text = feedBack;
			managerInstance->resetCommandIndex();
			userInputBox->Text = nullptr;
		}
		else if (e->KeyCode == Keys::Y) {
			// Redo
			ComCalManager* managerInstance = ComCalManager::getInstance();
			feedBack = MonthForm::convertstrToStr(managerInstance->deduceCommand("redo"));
			guiUpdate();
			feedBackBox->Text = feedBack;
			managerInstance->resetCommandIndex();
			userInputBox->Text = nullptr;
		}
		_ctrlHeld = false;
	}
	else if (e->KeyCode == Keys::Enter) {

		if (userInputBox->Text == "help") {
			ComCal_v01::HelpForm^ helpForm = gcnew HelpForm();
			helpForm->ShowDialog();
			userInputBox->Text = nullptr;
		}
		else if (userInputBox->Text == "exit" || userInputBox->Text == "close") {
				Application::Exit();
		}
		else{
			ComCalManager* managerInstance = ComCalManager::getInstance();
			try {
				feedBack = MonthForm::convertstrToStr(managerInstance->deduceCommand(typeConversions::trimExtraSpaces(MonthForm::convertStrTostr(userInputBox->Text))));
			}
			catch (std::exception& exception) {
				feedBack = MonthForm::convertstrToStr(exception.what());
			}

			guiUpdate();
			feedBackBox->Text = feedBack;
			managerInstance->resetCommandIndex();
			userInputBox->Text = nullptr;
		}
	}
	else if (e->KeyCode == Keys::Up) {
		std::string str = ComCalManager::getInstance()->moveCommandIndexUp();
		userInputBox->Text = ((str.size() <= 0) ? nullptr : MonthForm::convertstrToStr(str));
	}
	else if (e->KeyCode == Keys::Down) {
		std::string str = ComCalManager::getInstance()->moveCommandIndexDown();
		userInputBox->Text = ((str.size() <= 0) ? nullptr : MonthForm::convertstrToStr(str));
	}
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\MonthForm.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.cpp
	 */

// Task.cpp
// Implementation of functions in the Task class

#include "Task.h"
#include "typeConversions.h"

Task::Task() {
	_description = "";
	_location = "";
	_startDate = NULL;
	_endDate = NULL;
	_isDone = false;
	_isHidden = false;
}

Task::Task(std::string description, std::string location, int startDay, int startMonth, int startYear, int startTime, int endDay, int endMonth, int endYear, int endTime) {
	_description = description;
	_location = location;
	_startDate = new Date(startDay, startMonth, startYear, startTime);
	_endDate = new Date(endDay, endMonth, endYear, endTime);
	_isDone = false;
	_isHidden = false;
}

Task::Task(std::string description, std::string location, Date* startDate, Date* endDate) {
	_description = description;
	_location = location;
	_startDate = startDate;
	_endDate = endDate;
	_isDone = false;
	_isHidden = false;
}

Task::~Task() {
	if (_startDate != NULL) {
		delete _startDate;
	}

	if (_endDate != NULL) {
		delete _endDate;
	}
}

Date* Task::getStartDate() {
	return _startDate;
}

Date* Task::getEndDate() {
	return _endDate;
}

std::string Task::getDescription() {
	return _description;
}

std::string Task::getLocation() {
	return _location;
}

bool Task::getIsDone() {
	return _isDone;
}

void Task::done() {
	_isDone = true;
}

void Task::undone() {
	_isDone = false;
}

bool Task::hasStartDate() {
	return !(_startDate == NULL);
}

bool Task::hasEndDate() {
	return !(_endDate == NULL);
}

bool Task::isHidden() {
	return _isHidden;
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.cpp
	 */

void Task::setDescription(std::string description) {
	_description = description;
}

void Task::setLocation(std::string location) {
	_location = location;
}

void Task::setStartDate(Date* startDate) {
	_startDate = startDate;
}

void Task::setEndDate(Date* endDate) {
	_endDate = endDate;

}

void Task::hide() {
	_isHidden = true;
}

void Task::display() {
	_isHidden = false;
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.cpp
	 */

// Gets the string of this task to be rendered in calendar
std::string Task::toCalString() {
	if (_description.size() <= 9) {
		return _description;
	}
	return (_description.substr(0, 8) + "...");
}
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.h
	 */

// Task.h
// Contains the class that stores information about tasks

#pragma once

#include "Date.h"
#include "keywords.h"
#include "typeConversions.h"

class Task {
private:
	std::string _description;
	std::string _location;
	Date* _startDate;			// Could be null, as some tasks do not have a start date and time
	Date* _endDate;				// Could be null, as some tasks do not have a end date and time
	bool _isDone;
	bool _isHidden;				// If true, won't display in sidebar. To be manipulated with Show and Search

public:
	Task();
	Task(std::string description, std::string location, int startDay, int startMonth, int startYear, int startTime, int endDay, int endMonth, int endYear, int endTime);
	Task(std::string description, std::string location, Date* startDate, Date* endDate);
	~Task();

	// Getter methods
	std::string getDescription();
	std::string getLocation();
	Date* getStartDate();
	Date* getEndDate();
	bool getIsDone();
	bool hasStartDate();
	bool hasEndDate();
	bool isHidden();
	bool isBetween(const Date &date); //checks if a date is between the start and end date inclusive
	int getTaskTypeCode();

	// Setter methods
	void setDescription(std::string description);
	void setLocation(std::string location);
	void setStartDate(Date*);
	void setEndDate(Date*);
	void hide();
	void display();
	void done();
	void undone();

	std::string toString();
	std::string toGUIString();
	std::string toCalString();
};
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\TextStorage.cpp
	 */

#include "TextStorage.h"
#include "keywords.h"
#include "typeConversions.h"
#include <fstream>

using namespace rapidxml;

template<class Ch>
inline std::basic_ostream<Ch> &print(std::basic_ostream<Ch> &out, const xml_node<Ch> &node, int flags = 0);

// Global static pointer used to ensure a single instance of the class
TextStorage* TextStorage::_instance = NULL;

TextStorage::TextStorage() {
	_todoTasks = new std::vector<Task*>();
}

TextStorage::~TextStorage() {
	delete _todoTasks;
}

TextStorage* TextStorage::getInstance() {
	if (_instance == NULL)
		_instance = new TextStorage();
	return _instance;
}

void TextStorage::initialize(std::string todoFileName) {
	_todoFileName = todoFileName;
	loadTasks(_todoFileName);
}

unsigned int TextStorage::getNumberOfTasks() {
	return _todoTasks->size();
}

Task* TextStorage::getTask(int index) {
	if ((index >= _todoTasks->size()) || (index < 0)) {
		return NULL;
	}
	return _todoTasks->at(index);
}

std::string TextStorage::getTodoFileName() {
	return _todoFileName;
}

void TextStorage::addTask(Task* newTask) {
	_todoTasks->push_back(newTask);
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\TextStorage.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\TextStorage.cpp
	 */

bool TextStorage::deleteTask(int index) {
	if (index > _todoTasks->size())
		return false;
	if (index <= 0)
		return false;
	_todoTasks->erase(_todoTasks->begin() + index - 1);
	return true;
}


int TextStorage::displayAllTasks() {
	unsigned int size = _todoTasks->size();
	int count = 0;
	for (unsigned int i = 0; i < size; i++) {
		_todoTasks->at(i)->display();
		count++;
	}

	return count;
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\TextStorage.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\TextStorage.h
	 */


#pragma once

#include <string>
#include <vector>
#include "Task.h"
#include "keywords.h"
#include "typeConversions.h"
#include <fstream>
#include <vector>
#include "rapidxml.hpp"
#include "rapidxml_print.hpp"

//store, sort and updates the textfile
class TextStorage {
private:
	static TextStorage* _instance;
	TextStorage();
	~TextStorage();
	TextStorage(TextStorage const&);
	TextStorage& operator=(TextStorage const&);

	std::string _todoFileName;

	// These are 2 most important vectors in the application, at the start of the application, it will initialise the
	// 2 vectors with what is in the text file from TextStorage::getTextFileInfo. All add, delete, edit, undo, redo 
	// will affect these vectors. Right after add,delete,edit is executed, these vectors will pass its information 
	// to TextStorage for storing
	std::vector<Task*>* _todoTasks;

public:
	static TextStorage* getInstance();

	void initialize(std::string todoFileName);

	unsigned int getNumberOfTasks();
	Task* getTask(int index);
	std::string getTodoFileName();

	void addTask(Task* newTask);
	void addTaskAtSpecificPosition(Task* newTask, int position);
	bool deleteTask(int index);

	int displayAllTasks();

	int displayTodoTasks();
	int displayTodoTasks(const Date &date);

	int displayDoneTasks();
	int displayDoneTasks(const Date &date);

	int displayTimedTasks();
	int displayTimedTasks(int code, const Date &date);

	int displayPartialTask();
	int displayPartialTask(int code, const Date &date);

	int displayFloatingTasks();
	int displayFloatingTasks(bool isDone);

	int displayDeadlinedTasks();
	int displayDeadlinedTasks(int code,const Date &date);

	int displayMonthTasks(int code, int year, int month);

	int displayDatedTasks(int code, const Date &date);

	int displayWeekTasks(int code, std::vector<Date>);

	

	bool saveTasks(std::string fileName);
	bool loadTasks(std::string fileName);
};

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\TextStorage.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\typeConversions.cpp
	 */

// Converts std::string into int
int typeConversions::stringToInt(std::string str) {
	std::istringstream buffer(str);
	int result;
	buffer >> result;
	return result;
}

// Converts int into std::string
std::string typeConversions::intToString(int i) {
	std::stringstream ss;
	ss << i;
	return ss.str();
}

// Check if a string can be converted into an integer
bool typeConversions::isNumber(std::string str) {
	return !str.empty() && std::all_of(str.begin(), str.end(), ::isdigit);
}

// Converts std::string into lower case
std::string typeConversions::toLowerCase(std::string str) {
	std::transform(str.begin(), str.end(), str.begin(), ::tolower);
	return str;
}

// Removes the extra spaces in the string, eg. "a bc   def  ghi" becomes "a bc def ghi"
std::string typeConversions::trimExtraSpaces(std::string str) {
	while (true) {
		int find = str.find("  ");
		if ((find == -1) || (find == std::string::npos)) {
			return str;
		}
		str = str.substr(0, find) + str.substr(find + 1, str.length() - find - 1);
	}
	return str;
}


	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\typeConversions.cpp





