//@author: a0110783l



	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\comAndTask.cpp
	 */

#include "comAndTask.h"

comAndTask::comAndTask(std::string command, Task task) {
	_task = task;
	_command = command;
}

comAndTask::~comAndTask() {

}

std::string comAndTask::getCommand() {
	return _command;
}

Task comAndTask::getTask() {
	return _task;
}


	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\comAndTask.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\comAndTask.h
	 */

#pragma once
#include "Task.h"
#include <string>
#include "keywords.h"

//This class is used mainly for undo and redo
;
class comAndTask{

public:
	//Arguments: 1st - command string, 2nd - Task
	comAndTask(std::string, Task);
	~comAndTask();

	Task getTask();
	std::string getCommand();

private:
	Task _task;
	std::string _command;
};


	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\comAndTask.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ComCalManager.cpp
	 */


#include "ComCalManager.h"
#include "Add.h"
#include "Delete.h"
#include "Edit.h"
#include "Load.h"
#include "Save.h"
#include "Search.h"
#include "Show.h"
#include "timeDateInfo.h"
#include "keywords.h"
#include "TextStorage.h"
#include "Done.h"
#include "Undone.h"

#include <string>
#include <vector>


// Global static pointer used to ensure a single instance of the class
ComCalManager* ComCalManager::_instance = NULL;

ComCalManager::ComCalManager(){
	_commandIndex = 0;
	_sideBarView = new std::vector<std::string>();
	_timeDetails = timeDateInfo::setStructTm();
}

//Have not initialised TextStorage
void ComCalManager::initialise(int numOfFiles, const char** fileNames) {

	std::string todoFileName;
	if (numOfFiles == NOFILENAMEENTERED) {
		todoFileName = FILENAME_TODODEFAULT;
	}
	else if (numOfFiles == TODOFILENAMEENTERED) {
		todoFileName = fileNames[0];
	}
	else {
		todoFileName = fileNames[0];
	}

	TextStorage::getInstance()->initialize(todoFileName);
}

ComCalManager::~ComCalManager() {
	delete _sideBarView;
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ComCalManager.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ComCalManager.cpp
	 */

//Getter methods
ComCalManager* ComCalManager::getInstance() {
	if (_instance == NULL)
		_instance = new ComCalManager();
	return _instance;
}

std::vector<std::string>* ComCalManager::getSideVec() {
	return _sideBarView;
}
std::string ComCalManager::getSideBarTitle(){
	return _sideBarTitle;
}

struct tm* ComCalManager::getTimeDetails(){
	return _timeDetails;
}

void ComCalManager::populateSideBar() {
	int todoSize = TextStorage::getInstance()->getNumberOfTasks();

	_sideBarView->clear();
	Task* tempTask;
	Date* startDate;
	Date* endDate;
	std::string location;
	for (int i = 0; i < todoSize; i++) {
		tempTask = TextStorage::getInstance()->getTask(i);
		if (!tempTask->isHidden()) {
			_sideBarView->push_back(std::to_string(i+1) + INDEX_DESCRIPTION_SEPARATOR + "Desc: " + tempTask->getDescription() + " [" + (tempTask->getIsDone() ? "done" : "todo") + "]");

			if (tempTask->hasStartDate()) {
				startDate = tempTask->getStartDate();
				if (tempTask->hasEndDate()) { // Has both start date and end date
					endDate = tempTask->getEndDate();
					_sideBarView->push_back("    Time: " + startDate->toString()  + " to " + endDate->toString());
				}
				else { // Has only start date
					_sideBarView->push_back("    Time: " + startDate->toString());
				}
			}
			else if (tempTask->hasEndDate()) { // Has only end date
				endDate = tempTask->getEndDate();
				_sideBarView->push_back("    Time: by " + endDate->toString());
			}

			location = tempTask->getLocation();
			if (location.size() > 0) {
				_sideBarView->push_back("    Loc: " + location);
			}

			_sideBarView->push_back("");
		}
	}
}

void ComCalManager::setSideBarTitle(std::string sideBarTitle) {
	_sideBarTitle = sideBarTitle;
}

void ComCalManager::resetCommandIndex() {
	_commandIndex = _commands.size();
}

std::string ComCalManager::moveCommandIndexUp() {
	_commandIndex--;
	if (_commandIndex < 0) {
		_commandIndex = 0;
	}
	if (_commands.size() <= 0) {
		return "";
	}
	return _commands[_commandIndex];
}

std::string ComCalManager::moveCommandIndexDown() {
	_commandIndex++;
	int size = _commands.size();
	if (_commandIndex >= size) {
		_commandIndex = size;
		return "";
	}
	return _commands[_commandIndex];
}
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ComCalManager.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ComCalManager.h
	 */

#pragma once

#include "Command.h"
#include <stack>

class ComCalManager
{
private:
	static ComCalManager* _instance;

	//side bar viewer vector: This vector is used for search and show functions
	//To use this vector, delete the content in the vector then add in the searh/show info into this vector
	//The display will be done in the MonthForm.cpp by first getting this vector then displaying it on GUI
	std::vector<std::string>* _sideBarView;
	std::string _sideBarTitle;
	struct tm* _timeDetails;

	int _commandIndex;
	std::vector<std::string> _commands;

	std::stack<Command*> _commandHistory;
	std::stack<Command*> _undoHistory;
public:
	ComCalManager();
	~ComCalManager();

	static ComCalManager* getInstance();

	void initialise(int, const char**);

	//1) This function will deduce the mainCom and call that specific main function
	//2) The String^ here will be converted to a std::string the passed to the mainCom functions
	//3) Argument: std::string user input
	//3) Returns: std::string message for the UI feedback
	std::string deduceCommand(std::string);

	// Getter methods
	std::vector<std::string>* getSideVec();
	struct tm* getTimeDetails();
	std::string getSideBarTitle();

	//Setter methods
	void populateSideBar();
	void setSideBarTitle(std::string);

	void resetCommandIndex();
	std::string moveCommandIndexUp();
	std::string moveCommandIndexDown();
};

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ComCalManager.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Date.cpp
	 */

bool Date::operator<=(const Date &date) {

	if (date._year > _year) {
		return true;
	}
	else {
		if (date._month > _month && date._year == _year) {
			return true;
		}
		else {
			if (date._day >= _day && date._month == _month && date._year == _year) {
				return true;
			}
			else{
				return false;
			}
		}
	}
}

bool Date::operator>=(const Date &date) {
	if (date._year < _year) {
		return true;
	}
	else {
		if (date._month < _month && date._year == _year) {
			return true;
		}
		else {
			if (date._day <= _day && date._month == _month && date._year == _year) {
				return true;
			}
			else{
				return false;
			}
		}
	}
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Date.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ErrorLog.cpp
	 */

#include "ErrorLog.h"
#include <fstream>

void ErrorLog::inputErrorLog(const std::string error) {

	std::ofstream outputFile;

	outputFile.open(FILENAME_LOGDEFAULT, std::ios::app);

	if (outputFile.is_open()) {
		outputFile << error << std::endl;

		outputFile.close();
	}

}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ErrorLog.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ErrorLog.h
	 */

#pragma once

#include "typeConversions.h"
#include "keywords.h"

#include <string>
#include <vector>
;
namespace ErrorLog {
	void inputErrorLog(const std::string);
};


	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\ErrorLog.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\HelpForm.cpp
	 */

#include "HelpForm.h"


	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\HelpForm.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\HelpForm.h
	 */

#pragma once
#include <msclr\marshal_cppstd.h>
#include <msclr\marshal.h>

namespace ComCal_v01 {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for HelpForm
	/// </summary>
	public ref class HelpForm : public System::Windows::Forms::Form
	{
	public:
		HelpForm(void)
		{
			InitializeComponent();
			
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("User commands: add; edit; delete; done; undone; undo; redo; search"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("Time Input: \"HHMM\" E.g.: \"0830\" represents 8:30 AM; \"1600\" represents 4:00 PM"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("Date Input: \"DD/MM/YYYY\" E.g.: \"31/04/2015\" represents 31 April 2015; \"01/05/2015\" represents 1 May 2015"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("Acceptable Day Input: monday, tuesday, wednesday, thursday, friday, saturday, sunday, today, tomorrow, yesterday"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("last <day>, next <day>: last monday, last wednesday, next tuesday, next friday, etc."), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("Add Command Format: The only necessary attribute is <description>, the rest are optional"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("\"add .d <task description> .s <start date/day> <start time> .e <end date/day> <end time> .l <location>\""), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("e.g.: add .d SampleTask .s 14/04/2015 1000 .e 29/06/2016 1100 .l school"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("Token format:"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("- Description: .d, (can be omitted)"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("- Start date and time: .s, from, on"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("- End date and time: .e, to, by"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("- Location: .l, in, at"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("Edit Command Format: Only the token(s) you would like to change need to be specified"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("To edit, simply specify the index of the task, type a token, followed by the content you would like to change it to"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("edit <index> .d <new description> .s <new start date and/or time> .e <new end date and/or time> .l <new location>"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("eg. edit 26 .d Going to school .s 13/04/2015 1600 .e 3/04/2015 1800"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("Token format: .d - <Descripton> , .s - <start date & time> , .e - <end date & time> , .l - <location>"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("Show Command Format:"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("show <date/day> , show <date/day> <todo/done> , show <date/day> <floating/timed/partial/deadline> , show <floating/timed/partial/deadline>"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("show <week> , show <week> <specified date in week> , show <week> <todo/done> , show <week> <date/day> <todo/done>"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("show <month> , show <month> <year> , show <month> <year> <todo/done> , show <next> <week/month> , show <todo/done>"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("Delete/Done/Undon Command Format: Delete/Done/Undone using index seen on the left on the task"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("delete <index> eg. delete 4 , delete <multiple> eg. delete 1 4 2 8 , delete <all>"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("done/undone <index> eg. done/undone 2 , done/undone <multiple> eg. done/undone 2 3 5 1 , done <all> eg. done/undone all"), Environment::NewLine);
			helpBox->Text = String::Concat(helpBox->Text, convertstrToStr("Search <word>"), Environment::NewLine);

			// For adding of new lines:
			//helpBox->Text = String::Concat(helpBox->Text, typeConversions::convertstrToStr(""), Environment::NewLine);
		}

		System::String^ convertstrToStr(std::string userInput) {
			System::String^ strInput;

			strInput = msclr::interop::marshal_as<System::String^>(userInput);

			return strInput;
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~HelpForm()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::TextBox^  helpBox;
	protected:

	protected:

	protected:

	protected:

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->helpBox = (gcnew System::Windows::Forms::TextBox());
			this->SuspendLayout();
			// 
			// helpBox
			// 
			this->helpBox->Font = (gcnew System::Drawing::Font(L"Arial Narrow", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->helpBox->Location = System::Drawing::Point(2, 0);
			this->helpBox->Multiline = true;
			this->helpBox->Name = L"helpBox";
			this->helpBox->ReadOnly = true;
			this->helpBox->ScrollBars = System::Windows::Forms::ScrollBars::Vertical;
			this->helpBox->Size = System::Drawing::Size(1002, 521);
			this->helpBox->TabIndex = 0;
			this->helpBox->KeyUp += gcnew System::Windows::Forms::KeyEventHandler(this, &HelpForm::exitHelp);
			// 
			// HelpForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->BackColor = System::Drawing::Color::White;
			this->ClientSize = System::Drawing::Size(1003, 520);
			this->Controls->Add(this->helpBox);
			this->Name = L"HelpForm";
			this->Text = L"ComCal Helper";
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
	private: System::Void listView1_SelectedIndexChanged(System::Object^  sender, System::EventArgs^  e) {}
	private: 

		System::Void exitHelp(System::Object^  sender, System::Windows::Forms::KeyEventArgs^  e) {
			if (e->KeyCode == Keys::Escape || e->KeyCode == Keys::End || e->KeyCode == Keys::Enter) {
				this->Close();
			}
		}
	};
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\HelpForm.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\keywords.h
	 */

#pragma once
#include <string>

//Command strings that a user can input
static const std::string COMMAND_ADD = "add";
static const std::string COMMAND_DELETE = "delete";
static const std::string COMMAND_EDIT = "edit";
static const std::string COMMAND_LOAD = "load";
static const std::string COMMAND_REDO = "redo";
static const std::string COMMAND_SAVE = "save";
static const std::string COMMAND_SEARCH = "search";
static const std::string COMMAND_SHOW = "show";
static const std::string COMMAND_UNDO = "undo";
static const std::string COMMAND_DONE = "done";
static const std::string COMMAND_UNDONE = "undone";

// Strings for date input
static const std::string DATE_YESTERDAY = "yesterday";
static const std::string DATE_TODAY = "today";
static const std::string DATE_TOMORROW = "tomorrow";
static const std::string DATE_MONDAY = "Monday";
static const std::string DATE_TUESDAY = "Tuesday";
static const std::string DATE_WEDNESDAY = "Wednesday";
static const std::string DATE_THURSDAY = "Thursday";
static const std::string DATE_FRIDAY = "Friday";
static const std::string DATE_SATURDAY = "Saturday";
static const std::string DATE_SUNDAY = "Sunday";
static const std::string DATE_WEEK = "week";
static const std::string DATE_MONTH = "month";
static const std::string DATE_LAST = "last";
static const std::string DATE_NEXT = "next";
static const std::string WEEK = "week";

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\keywords.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\keywords.h
	 */

//Default file names constant string declarations:
static const std::string FILENAME_TODODEFAULT = "ComCal_todo.xml";

//Default log file name constant string declarations:
static const std::string FILENAME_LOGDEFAULT = "ErrorLog.txt";

//Number of file name arguments constant int declarations:
static const int NOFILENAMEENTERED = 0;
static const int TODOFILENAMEENTERED = 1;

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\keywords.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\keywords.h
	 */

//keyboard shortcuts
static const std::string NEWLINE = " \n";
static const std::string INDEX_DESCRIPTION_SEPARATOR = ") ";
static const std::string SHOW_COUNT_START = "(Show count: ";
static const std::string SHOW_COUNT_END = ")";

//SideBar titles
static const std::string ALL_TODO_TITLE = "All Todo Tasks";
static const std::string ALL_DONE_TITLE = "All Done Tasks";
static const std::string SEARCH_RESULTS_TITLE = "Search Results";
static const std::string TODAY_TASKS_TITLE = "Today's Tasks";
static const std::string ALL_TASKS_TITLE = "All tasks";

static const std::string ALL_TASKS_WITH_DEADLINE_TITLE = "Deadlined Tasks\n";
static const std::string ALL_TODO_TASKS_WITH_DEADLINE_TITLE = "Todo Deadlined Tasks";
static const std::string ALL_DONE_TASKS_WITH_DEADLINE_TITLE = "Done Deadlined Tasks";

static const std::string ALL_FLOATING_TASKS_TITLE = "Floating Tasks";
static const std::string ALL_TODO_FLOATING_TASKS_TITLE = "Todo Floating Tasks";
static const std::string ALL_DONE_FLOATING_TASKS_TITLE = "Done Floating Tasks";

static const std::string ALL_PARTIAL_TASKS_TITLE = "Partial-timed Tasks";
static const std::string ALL_TODO_PARTIAL_TASKS_TITLE = "Todo Partial-timed Tasks";
static const std::string ALL_DONE_PARTIAL_TASKS_TITLE = "Done Partial-timed Tasks";

static const std::string ALL_TIMED_TASKS_TITLE = "Timed Tasks";
static const std::string ALL_TODO_TIMED_TASKS_TITLE = "Todo Timed Tasks";
static const std::string ALL_DONE_TIMED_TASKS_TITLE = "Done Timed Tasks";

static const std::string THIS_WEEK_ALL_TASK = "This Week's Task";
static const std::string THIS_WEEK_TODO_TASK_TITLE = "This Week's Todo Task";
static const std::string THIS_WEEK_DONE_TASK_TITLE = "This Week's Done Task";

static const std::string NEXT_WEEK_TITLE = "Next Week's Tasks";
static const std::string NEXT_MONTH_TITLE = "Next Month's Tasks";

static const std::string DATED_TODO_TASKS = " Todo Tasks";
static const std::string DATED_DONE_TASKS = " Done Tasks";

//Feedbacks
static const std::string ALL_TASKS_FEEDBACK = "All tasks shown in sideBar";
static const std::string ALL_TODO_FEEDBACK = "All todo tasks shown in sideBar";
static const std::string ALL_DONE_FEEDBACK = "All done tasks shown in sideBar";
static const std::string SHOW_TODAY_FEEDBACK = "All tasks today shown in sideBar";
static const std::string ZERO_SHOW_RESULTS = "There are zero show results";
static const std::string CURRENT_MONTH_TASKS = "All current month tasks in sideBar and calendar";

static const std::string ALL_DEADLINED_FEEDBACK = "All tasks with deadlines in sideBar";
static const std::string ALL_TODO_DEADLINED_FEEDBACK = "All todo tasks with deadlines in sideBar";
static const std::string ALL_DONE_DEADLINED_FEEDBACK = "All done tasks with deadlines in sideBar";

static const std::string ALL_PARTIAL_FEEDBACK = "All partial-timed tasks in sideBar";
static const std::string ALL_TODO_PARTIAL_FEEDBACK = "All todo partial-timed tasks in sideBar";
static const std::string ALL_DONE_PARTIAL_FEEDBACK = "All done partial-timed tasks in sideBar";

static const std::string ALL_FLOATING_TASKS_FEEDBACK = "All floating tasks in sideBar";
static const std::string ALL_TODO_FLOATING_TASKS_FEEDBACK = "All todo floating tasks in sideBar";
static const std::string ALL_DONE_FLOATING_TASKS_FEEDBACK = "All done floating tasks in sideBar";

static const std::string ALL_TIMED_TASKS_FEEDBACK = "All timed tasks in sideBar";
static const std::string ALL_TODO_TIMED_TASKS_FEEDBACK = "All todo timed tasks in sideBar";
static const std::string ALL_DONE_TIMED_TASKS_FEEDBACK = "All done timed tasks in sideBar";

static const std::string NEXT_MONTH_TASKS_FEEDBACK = "Next month's tasks shown in sideBar";
static const std::string NEXT_WEEK_TASKS_FEEDBACK = "Next week's tasks shown in sideBar";
static const std::string THIS_WEEK_TASKS_FEEDBACK = "This week's tasks shown in sideBar";
static const std::string THIS_WEEK_TODO_TASKS_FEEDBACK = "This week's todo tasks shown in sideBar";
static const std::string THIS_WEEK_DONE_TASKS_FEEDBACK = "This week's done tasks shown in sideBar";

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\keywords.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Main.cpp
	 */

#include "MonthForm.h"

using namespace ComCal_v01;
using namespace System;
using namespace System::Windows::Forms;

int main (array<String^>^ fileNames) {
	int numOfSpecifiedFiles = fileNames->Length;

	Application::EnableVisualStyles();
	Application::SetCompatibleTextRenderingDefault(false);

	MonthForm form(0, fileNames);
	Application::Run(%form);

	return 0;
}
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Main.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\MonthForm.cpp
	 */

#include <wchar.h>
#include <time.h>
#include <fstream>
#include <sstream>
#include <msclr\marshal_cppstd.h>
#include <msclr\marshal.h>
#include "MonthForm.h"
#include "timeDateInfo.h"
#include "typeConversions.h"
#include "TextStorage.h"
#include "ErrorLog.h"
#include "Exceptions.h"
#include "Date.h"
#include "HelpForm.h"

using namespace ComCal_v01;
using namespace System::Windows::Forms;

MonthForm::MonthForm(int argc, array<String^>^ argv)
{
	InitializeComponent();

	storeDateTextBlockInList();
	storeTasksTextBlockInList();

	const char** charFileNames = new const char*[argc];

	if (argc > 0) {
		MonthForm::convertArrStrToConststrArr(argv, charFileNames, argc);
	}

	ComCalManager::getInstance()->initialise(argc, charFileNames);
	TextStorage::getInstance()->displayMonthTasks(ALL_CODE,ComCalManager::getInstance()->getTimeDetails()->tm_year+1900,ComCalManager::getInstance()->getTimeDetails()->tm_mon + 1);
	ComCalManager::getInstance()->setSideBarTitle(timeDateInfo::getMonthStr(ComCalManager::getInstance()->getTimeDetails()->tm_mon) + " " + typeConversions::intToString(ComCalManager::getInstance()->getTimeDetails()->tm_year + 1900));
	_ctrlHeld = false;

	defaultView(nullptr, nullptr);
}

std::string MonthForm::convertStrTostr(System::String^ userInput) {
	std::string strInput;

	strInput = msclr::interop::marshal_as<std::string>(userInput);

	return strInput;
}

// Converts std::string into System::String^
System::String^ MonthForm::convertstrToStr(std::string userInput) {
	System::String^ strInput;

	strInput = msclr::interop::marshal_as<System::String^>(userInput);

	return strInput;
}

void MonthForm::convertArrStrToConststrArr(array<System::String^>^ fileNames, const char** strFilesNames, int numOfSpecifiedFiles) {

	msclr::interop::marshal_context^ context = gcnew msclr::interop::marshal_context();
	strFilesNames = new const char*[numOfSpecifiedFiles];
	for (int i = 0; i < numOfSpecifiedFiles; i++) {
		strFilesNames[i] = context->marshal_as<const char*>(fileNames[i]);

		context = nullptr;
	}

}

MonthForm::~MonthForm()
{
	TextStorage::getInstance()->saveTasks(FILENAME_TODODEFAULT);
	if (components)	{
		delete components;
	}
}

System::Void MonthForm::defaultView(System::Object^  sender, System::EventArgs^  e) {
	setCalendarDate_MonthForm(timeDateInfo::setStructTm());
	ComCalManager::getInstance()->populateSideBar();
	updateSideBar();
}

void MonthForm::guiUpdate() {
	updateSideBar();
	updateCalendar();
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\MonthForm.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\MonthForm.cpp
	 */

System::Void MonthForm::ctrlHold(System::Object^  sender, System::Windows::Forms::KeyEventArgs^  e) {
	if (e->KeyCode == Keys::ControlKey) {
		_ctrlHeld = true;
	}
}

void ComCal_v01::MonthForm::setCalendarDate_MonthForm(struct tm* newtime) {
	String^ dateNum = "1";
	std::string monthTitleStr;

	newtime->tm_mday = 1;;
	mktime(newtime);

	//set the title
	monthFormTitle->Text = setMonthPageTitle(newtime);

	//set the calendar texts to nullptr
	for (int j = 0; j < NUM_BLOCKS_IN_CALENDAR; j++) {
		dateList[j]->Text = nullptr;
	}

	//sets remaining dates on the month grid
	for (int i = newtime->tm_wday; i < (newtime->tm_wday + timeDateInfo::getDaysInMonth(newtime->tm_mon, newtime->tm_year)); ++i) {
		dateList[i]->Text = dateNum;

		dateNum = incrementStringDate(dateNum, 1);
	}

	loadCalendarTodoTasks(newtime);
}

String^ MonthForm::incrementStringDate(String^ dateNum, int incrementSize) {
	std::string dateNumStr = MonthForm::convertStrTostr(dateNum);
	std::stringstream convert;
	int dateNumInt;

	convert << dateNumStr;
	convert >> dateNumInt;

	dateNumInt += incrementSize;
	dateNum = dateNumInt.ToString();

	return dateNum;
}

System::String^ ComCal_v01::MonthForm::setMonthPageTitle(struct tm* newtime) {
	int currentYear = newtime->tm_year + 1900;
	std::string yearStr;
	std::string title;

	std::stringstream convert;
	convert << currentYear;
	yearStr = convert.str();

	title += timeDateInfo::getMonthStr(newtime->tm_mon);
	title += " ";
	title += yearStr;

	System::String^ titleStr = gcnew System::String(title.c_str());

	return titleStr;
}

void ComCal_v01::MonthForm::updateCalendar() {
	setCalendarDate_MonthForm(ComCalManager::getInstance()->getTimeDetails());
}

int MonthForm::searchTaskMonth(struct tm* newtime) {
	int iter = -1;
	int desiredMnth = newtime->tm_mon + 1;
	int desiredYr = newtime->tm_year;

	Task* tempTask;
	while (iter++) {
		tempTask = TextStorage::getInstance()->getTask(iter);
		if (tempTask->getStartDate()->getMonth() == desiredMnth && tempTask->getStartDate()->getYear() == desiredYr) {
			break;
		}
		if (iter + 1 == TextStorage::getInstance()->getNumberOfTasks()) {
			break;
		}
	}
	
	return iter;
}

void ComCal_v01::MonthForm::loadCalendarTodoTasks(struct tm* newtime) {

	int todoSize = TextStorage::getInstance()->getNumberOfTasks();
	int monthRef = newtime->tm_mon + 1;
	int year = newtime->tm_year;
	std::string taskStr[NUM_BLOCKS_IN_CALENDAR];
	System::Collections::Generic::List<System::String^> taskStrList;

	for (int k = 0; k < NUM_BLOCKS_IN_CALENDAR; k++){
		taskStrList.Insert(k, nullptr);
	}

	if (todoSize > 0) {

		//to loop through taskList and dateList
		for (int i = newtime->tm_wday; i < (newtime->tm_wday + timeDateInfo::getDaysInMonth(newtime->tm_mon, newtime->tm_year)); ++i) {

			//to loop through todoVec
			for (int j = 0; j < todoSize; j++) {
				Task* tempTask = TextStorage::getInstance()->getTask(j);

				if (tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE) {
					if ((System::Int32::Parse(dateList[i]->Text) == tempTask->getEndDate()->getDay()) && (monthRef == tempTask->getEndDate()->getMonth()) && (year == tempTask->getEndDate()->getYear())) {
						taskStrList[i] = String::Concat(taskStrList[i], MonthForm::convertstrToStr(typeConversions::intToString(j + 1) + INDEX_DESCRIPTION_SEPARATOR + tempTask->toCalString()), Environment::NewLine);
					}
				}

				if (tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED) {
					
					if ((System::Int32::Parse(dateList[i]->Text) == tempTask->getStartDate()->getDay()) && (monthRef == tempTask->getStartDate()->getMonth()) && (year == tempTask->getStartDate()->getYear())) {
						taskStrList[i]= String::Concat(taskStrList[i], MonthForm::convertstrToStr(typeConversions::intToString(j + 1) + INDEX_DESCRIPTION_SEPARATOR + tempTask->toCalString()), Environment::NewLine);
					}
				}

				if (tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED) {
					Date * refDate = new Date(System::Int32::Parse(dateList[i]->Text), monthRef, year, 0000);

					if (tempTask->isBetween(*refDate)) {
						taskStrList[i] = String::Concat(taskStrList[i], MonthForm::convertstrToStr(typeConversions::intToString(j + 1) + INDEX_DESCRIPTION_SEPARATOR + tempTask->toCalString()), Environment::NewLine);
					}

					delete refDate;
					refDate = NULL;
				}//end of tasktypecode_timed

			}

		}
	}
	else {
		ErrorLog::inputErrorLog(NO_TASKS_IN_VECTOR);
	}

	//adds the tasks to the task lists in the calendar for viewing
	for (int k = 0; k < NUM_BLOCKS_IN_CALENDAR; k++) {
		taskList[k]->Text = nullptr;
		taskList[k]->Text = taskStrList[k];
	}
}

void ComCal_v01::MonthForm::updateSideBar() {
	sideBarTitle->Text = nullptr;
	sideBarTitle->Text = MonthForm::convertstrToStr(ComCalManager::getInstance()->getSideBarTitle());

	int numOfLines = ComCalManager::getInstance()->getSideVec()->size();
	std::string sideBarStr;
	std::vector<std::string>* sideVec = ComCalManager::getInstance()->getSideVec();
	sideBar->Text = nullptr;

	for (int i = 0; i < numOfLines; i++) {
		sideBar->Text = String::Concat(sideBar->Text, MonthForm::convertstrToStr(sideVec->at(i)), Environment::NewLine);
	}
}

void ComCal_v01::MonthForm::storeDateTextBlockInList() {
	int i = 0;

	dateList.Insert(i, dateBox11);
	dateList.Insert(++i, dateBox12);
	dateList.Insert(++i, dateBox13);
	dateList.Insert(++i, dateBox14);
	dateList.Insert(++i, dateBox15);
	dateList.Insert(++i, dateBox16);
	dateList.Insert(++i, dateBox17);

	dateList.Insert(++i, dateBox21);
	dateList.Insert(++i, dateBox22);
	dateList.Insert(++i, dateBox23);
	dateList.Insert(++i, dateBox24);
	dateList.Insert(++i, dateBox25);
	dateList.Insert(++i, dateBox26);
	dateList.Insert(++i, dateBox27);

	dateList.Insert(++i, dateBox31);
	dateList.Insert(++i, dateBox32);
	dateList.Insert(++i, dateBox33);
	dateList.Insert(++i, dateBox34);
	dateList.Insert(++i, dateBox35);
	dateList.Insert(++i, dateBox36);
	dateList.Insert(++i, dateBox37);

	dateList.Insert(++i, dateBox41);
	dateList.Insert(++i, dateBox42);
	dateList.Insert(++i, dateBox43);
	dateList.Insert(++i, dateBox44);
	dateList.Insert(++i, dateBox45);
	dateList.Insert(++i, dateBox46);
	dateList.Insert(++i, dateBox47);

	dateList.Insert(++i, dateBox51);
	dateList.Insert(++i, dateBox52);
	dateList.Insert(++i, dateBox53);
	dateList.Insert(++i, dateBox54);
	dateList.Insert(++i, dateBox55);
	dateList.Insert(++i, dateBox56);
	dateList.Insert(++i, dateBox57);

	dateList.Insert(++i, dateBox61);
	dateList.Insert(++i, dateBox62);
	dateList.Insert(++i, dateBox63);
	dateList.Insert(++i, dateBox64);
	dateList.Insert(++i, dateBox65);
	dateList.Insert(++i, dateBox66);
	dateList.Insert(++i, dateBox67);
}

void ComCal_v01::MonthForm::storeTasksTextBlockInList() {
	int i = 0;

	taskList.Insert(i, taskBox11);
	taskList.Insert(++i, taskBox12);
	taskList.Insert(++i, taskBox13);
	taskList.Insert(++i, taskBox14);
	taskList.Insert(++i, taskBox15);
	taskList.Insert(++i, taskBox16);
	taskList.Insert(++i, taskBox17);

	taskList.Insert(++i, taskBox21);
	taskList.Insert(++i, taskBox22);
	taskList.Insert(++i, taskBox23);
	taskList.Insert(++i, taskBox24);
	taskList.Insert(++i, taskBox25);
	taskList.Insert(++i, taskBox26);
	taskList.Insert(++i, taskBox27);

	taskList.Insert(++i, taskBox31);
	taskList.Insert(++i, taskBox32);
	taskList.Insert(++i, taskBox33);
	taskList.Insert(++i, taskBox34);
	taskList.Insert(++i, taskBox35);
	taskList.Insert(++i, taskBox36);
	taskList.Insert(++i, taskBox37);

	taskList.Insert(++i, taskBox41);
	taskList.Insert(++i, taskBox42);
	taskList.Insert(++i, taskBox43);
	taskList.Insert(++i, taskBox44);
	taskList.Insert(++i, taskBox45);
	taskList.Insert(++i, taskBox46);
	taskList.Insert(++i, taskBox47);

	taskList.Insert(++i, taskBox51);
	taskList.Insert(++i, taskBox52);
	taskList.Insert(++i, taskBox53);
	taskList.Insert(++i, taskBox54);
	taskList.Insert(++i, taskBox55);
	taskList.Insert(++i, taskBox56);
	taskList.Insert(++i, taskBox57);

	taskList.Insert(++i, taskBox61);
	taskList.Insert(++i, taskBox62);
	taskList.Insert(++i, taskBox63);
	taskList.Insert(++i, taskBox64);
	taskList.Insert(++i, taskBox65);
	taskList.Insert(++i, taskBox66);
	taskList.Insert(++i, taskBox67);
}
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\MonthForm.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\MonthForm.h
	 */

#pragma once

#include <string>
#include "ComCalManager.h"

namespace ComCal_v01 {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for MonthForm
	/// </summary>
	public ref class MonthForm : public System::Windows::Forms::Form
	{
	public:
		MonthForm(int, array<String^>^);
		void setCalendarDate_MonthForm(struct tm*);

	private:
		bool _ctrlHeld;
		System::Collections::Generic::List<System::Windows::Forms::TextBox^> dateList;
		System::Collections::Generic::List<System::Windows::Forms::TextBox^> taskList;

	private:
		void storeDateTextBlockInList();
		void storeTasksTextBlockInList();

		System::String^ incrementStringDate(System::String^, int);
		System::String^ setMonthPageTitle(struct tm*);
		std::string convertStrTostr(System::String^); // Converts System::String^ into std::string
		System::String^ convertstrToStr(std::string); // Converts std::string into System::String^
		void convertArrStrToConststrArr(array<System::String^>^, const char**, int);

		void updateSideBar();
		void updateCalendar();
		void guiUpdate();
		void loadCalendarTodoTasks(struct tm*);
		int searchTaskMonth(struct tm*);

	private: System::Windows::Forms::TableLayoutPanel^  table63;

	private: System::Windows::Forms::TextBox^  taskBox63;

	private: System::Windows::Forms::TextBox^  dateBox63;

	private: System::Windows::Forms::TableLayoutPanel^  table62;

	private: System::Windows::Forms::TextBox^  taskBox62;

	private: System::Windows::Forms::TextBox^  dateBox62;

	private: System::Windows::Forms::TableLayoutPanel^  table61;

	private: System::Windows::Forms::TextBox^  taskBox61;

	private: System::Windows::Forms::TextBox^  dateBox61;

	private: System::Windows::Forms::TableLayoutPanel^  table64;

	private: System::Windows::Forms::TextBox^  taskBox64;

	private: System::Windows::Forms::TextBox^  dateBox64;

	private: System::Windows::Forms::TableLayoutPanel^  table67;

	private: System::Windows::Forms::TextBox^  taskBox67;

	private: System::Windows::Forms::TextBox^  dateBox67;

	private: System::Windows::Forms::TableLayoutPanel^  table66;

	private: System::Windows::Forms::TextBox^  taskBox66;

	private: System::Windows::Forms::TextBox^  dateBox66;

	private: System::Windows::Forms::TableLayoutPanel^  table65;

	private: System::Windows::Forms::TextBox^  taskBox65;

	private: System::Windows::Forms::TextBox^  dateBox65;

	private: System::Windows::Forms::Button^  resetButton;

	private: System::Windows::Forms::TextBox^  dateBox11;

	private: System::Windows::Forms::TextBox^  taskBox11;

	private: System::Windows::Forms::TextBox^  sideBar;

	private: System::Windows::Forms::TextBox^  sideBarTitle;

	private: System::Windows::Forms::TableLayoutPanel^  table57;

	private: System::Windows::Forms::TextBox^  taskBox57;

	private: System::Windows::Forms::TextBox^  dateBox57;

	private: System::Windows::Forms::TableLayoutPanel^  table56;

	private: System::Windows::Forms::TextBox^  taskBox56;

	private: System::Windows::Forms::TextBox^  dateBox56;

	private: System::Windows::Forms::TableLayoutPanel^  table55;

	private: System::Windows::Forms::TextBox^  taskBox55;

	private: System::Windows::Forms::TextBox^  dateBox55;

	private: System::Windows::Forms::TableLayoutPanel^  table54;

	private: System::Windows::Forms::TextBox^  taskBox54;

	private: System::Windows::Forms::TextBox^  dateBox54;

	private: System::Windows::Forms::TableLayoutPanel^  table53;

	private: System::Windows::Forms::TextBox^  taskBox53;

	private: System::Windows::Forms::TextBox^  dateBox53;

	private: System::Windows::Forms::TableLayoutPanel^  table52;

	private: System::Windows::Forms::TextBox^  taskBox52;

	private: System::Windows::Forms::TextBox^  dateBox52;

	private: System::Windows::Forms::TableLayoutPanel^  table47;

	private: System::Windows::Forms::TextBox^  taskBox47;

	private: System::Windows::Forms::TextBox^  dateBox47;

	private: System::Windows::Forms::TableLayoutPanel^  table46;

	private: System::Windows::Forms::TextBox^  taskBox46;

	private: System::Windows::Forms::TextBox^  dateBox46;

	private: System::Windows::Forms::TableLayoutPanel^  tableLayoutPanel26;

	private: System::Windows::Forms::TextBox^  taskBox45;

	private: System::Windows::Forms::TextBox^  dateBox45;

	private: System::Windows::Forms::TableLayoutPanel^  table44;

	private: System::Windows::Forms::TextBox^  taskBox44;

	private: System::Windows::Forms::TextBox^  dateBox44;


	private: System::Windows::Forms::TableLayoutPanel^  table43;

	private: System::Windows::Forms::TextBox^  taskBox43;

	private: System::Windows::Forms::TextBox^  dateBox43;

	private: System::Windows::Forms::TableLayoutPanel^  table42;

	private: System::Windows::Forms::TextBox^  taskBox42;

	private: System::Windows::Forms::TextBox^  dateBox42;

	private: System::Windows::Forms::TableLayoutPanel^  tableLayoutPanel22;

	private: System::Windows::Forms::TextBox^  taskBox41;

	private: System::Windows::Forms::TextBox^  dateBox41;

	private: System::Windows::Forms::TableLayoutPanel^  table37;

	private: System::Windows::Forms::TextBox^  taskBox37;

	private: System::Windows::Forms::TextBox^  dateBox37;

	private: System::Windows::Forms::TableLayoutPanel^  table36;

	private: System::Windows::Forms::TextBox^  taskBox36;

	private: System::Windows::Forms::TextBox^  dateBox36;

	private: System::Windows::Forms::TableLayoutPanel^  table35;

	private: System::Windows::Forms::TextBox^  taskBox35;

	private: System::Windows::Forms::TextBox^  dateBox35;

	private: System::Windows::Forms::TableLayoutPanel^  table34;

	private: System::Windows::Forms::TextBox^  taskBox34;

	private: System::Windows::Forms::TextBox^  dateBox34;

	private: System::Windows::Forms::TableLayoutPanel^  table33;

	private: System::Windows::Forms::TextBox^  taskBox33;

	private: System::Windows::Forms::TextBox^  dateBox33;

	private: System::Windows::Forms::TableLayoutPanel^  table32;

	private: System::Windows::Forms::TextBox^  taskBox32;

	private: System::Windows::Forms::TextBox^  dateBox32;

	private: System::Windows::Forms::TableLayoutPanel^  table31;

	private: System::Windows::Forms::TextBox^  taskBox31;

	private: System::Windows::Forms::TextBox^  dateBox31;

	private: System::Windows::Forms::TableLayoutPanel^  table27;

	private: System::Windows::Forms::TextBox^  taskBox27;

	private: System::Windows::Forms::TextBox^  dateBox27;

	private: System::Windows::Forms::TableLayoutPanel^  table26;

	private: System::Windows::Forms::TextBox^  taskBox26;

	private: System::Windows::Forms::TextBox^  dateBox26;

	private: System::Windows::Forms::TableLayoutPanel^  table25;


	private: System::Windows::Forms::TextBox^  taskBox25;

	private: System::Windows::Forms::TextBox^  dateBox25;

	private: System::Windows::Forms::TableLayoutPanel^  table24;

	private: System::Windows::Forms::TextBox^  taskBox24;

	private: System::Windows::Forms::TextBox^  dateBox24;

	private: System::Windows::Forms::TableLayoutPanel^  table23;

	private: System::Windows::Forms::TextBox^  taskBox23;

	private: System::Windows::Forms::TextBox^  dateBox23;

	private: System::Windows::Forms::TableLayoutPanel^  table22;

	private: System::Windows::Forms::TextBox^  taskBox22;

	private: System::Windows::Forms::TextBox^  dateBox22;

	private: System::Windows::Forms::TableLayoutPanel^  table21;

	private: System::Windows::Forms::TextBox^  taskBox21;

	private: System::Windows::Forms::TextBox^  dateBox21;


	private: System::Windows::Forms::TableLayoutPanel^  table17;

	private: System::Windows::Forms::TextBox^  taskBox17;

	private: System::Windows::Forms::TextBox^  dateBox17;

	private: System::Windows::Forms::TableLayoutPanel^  table16;

	private: System::Windows::Forms::TextBox^  taskBox16;

	private: System::Windows::Forms::TextBox^  dateBox16;

	private: System::Windows::Forms::TableLayoutPanel^  table15;

	private: System::Windows::Forms::TextBox^  taskBox15;

	private: System::Windows::Forms::TextBox^  dateBox15;

private: System::Windows::Forms::TableLayoutPanel^  table14;

private: System::Windows::Forms::TextBox^  taskBox14;

private: System::Windows::Forms::TextBox^  dateBox14;

private: System::Windows::Forms::TableLayoutPanel^  table13;

private: System::Windows::Forms::TextBox^  taskBox13;

private: System::Windows::Forms::TextBox^  dateBox13;

private: System::Windows::Forms::TableLayoutPanel^  table12;

private: System::Windows::Forms::TextBox^  taskBox12;

private: System::Windows::Forms::TextBox^  dateBox12;

private: System::Windows::Forms::TableLayoutPanel^  table51;

private: System::Windows::Forms::TextBox^  taskBox51;

private: System::Windows::Forms::TextBox^  dateBox51;
private: System::Windows::Forms::TextBox^  feedBackBox;



	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~MonthForm();
		//Function to set the calendar----------------------------------------------------------------


		//--------------------------------------------------------------------------------------------

	private: System::Windows::Forms::TableLayoutPanel^  monthPanel;

	private: System::Windows::Forms::TextBox^  dayTxtBlkSun;
	private: System::Windows::Forms::TextBox^  dayTxtBlkSat;
	private: System::Windows::Forms::TextBox^  dayTxtBlkFri;
	private: System::Windows::Forms::TextBox^  dayTxtBlkThur;
	private: System::Windows::Forms::TextBox^  dayTxtBlkWed;
	private: System::Windows::Forms::TextBox^  dayTxtBlkTue;
	private: System::Windows::Forms::TextBox^  dayTxtBlkMon;


	private: System::Windows::Forms::TextBox^  userInputBox;
private: System::Windows::Forms::TableLayoutPanel^  table11;
private: System::Windows::Forms::TextBox^  monthFormTitle;



	protected:

	protected:


	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->monthPanel = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->table63 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox63 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox63 = (gcnew System::Windows::Forms::TextBox());
			this->table62 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox62 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox62 = (gcnew System::Windows::Forms::TextBox());
			this->table61 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox61 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox61 = (gcnew System::Windows::Forms::TextBox());
			this->table64 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox64 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox64 = (gcnew System::Windows::Forms::TextBox());
			this->table67 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox67 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox67 = (gcnew System::Windows::Forms::TextBox());
			this->table66 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox66 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox66 = (gcnew System::Windows::Forms::TextBox());
			this->table65 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox65 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox65 = (gcnew System::Windows::Forms::TextBox());
			this->table51 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox51 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox51 = (gcnew System::Windows::Forms::TextBox());
			this->table57 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox57 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox57 = (gcnew System::Windows::Forms::TextBox());
			this->table56 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox56 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox56 = (gcnew System::Windows::Forms::TextBox());
			this->table55 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox55 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox55 = (gcnew System::Windows::Forms::TextBox());
			this->table54 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox54 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox54 = (gcnew System::Windows::Forms::TextBox());
			this->table53 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox53 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox53 = (gcnew System::Windows::Forms::TextBox());
			this->table52 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox52 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox52 = (gcnew System::Windows::Forms::TextBox());
			this->table47 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox47 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox47 = (gcnew System::Windows::Forms::TextBox());
			this->table46 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox46 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox46 = (gcnew System::Windows::Forms::TextBox());
			this->tableLayoutPanel26 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox45 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox45 = (gcnew System::Windows::Forms::TextBox());
			this->table44 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox44 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox44 = (gcnew System::Windows::Forms::TextBox());
			this->table43 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox43 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox43 = (gcnew System::Windows::Forms::TextBox());
			this->table42 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox42 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox42 = (gcnew System::Windows::Forms::TextBox());
			this->tableLayoutPanel22 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox41 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox41 = (gcnew System::Windows::Forms::TextBox());
			this->table37 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox37 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox37 = (gcnew System::Windows::Forms::TextBox());
			this->table36 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox36 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox36 = (gcnew System::Windows::Forms::TextBox());
			this->table35 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox35 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox35 = (gcnew System::Windows::Forms::TextBox());
			this->table34 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox34 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox34 = (gcnew System::Windows::Forms::TextBox());
			this->table33 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox33 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox33 = (gcnew System::Windows::Forms::TextBox());
			this->table32 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox32 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox32 = (gcnew System::Windows::Forms::TextBox());
			this->table31 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox31 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox31 = (gcnew System::Windows::Forms::TextBox());
			this->table27 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox27 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox27 = (gcnew System::Windows::Forms::TextBox());
			this->table26 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox26 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox26 = (gcnew System::Windows::Forms::TextBox());
			this->table25 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox25 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox25 = (gcnew System::Windows::Forms::TextBox());
			this->table24 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox24 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox24 = (gcnew System::Windows::Forms::TextBox());
			this->table23 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox23 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox23 = (gcnew System::Windows::Forms::TextBox());
			this->table22 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox22 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox22 = (gcnew System::Windows::Forms::TextBox());
			this->table21 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox21 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox21 = (gcnew System::Windows::Forms::TextBox());
			this->table17 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox17 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox17 = (gcnew System::Windows::Forms::TextBox());
			this->table16 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox16 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox16 = (gcnew System::Windows::Forms::TextBox());
			this->table15 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox15 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox15 = (gcnew System::Windows::Forms::TextBox());
			this->table14 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox14 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox14 = (gcnew System::Windows::Forms::TextBox());
			this->table13 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox13 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox13 = (gcnew System::Windows::Forms::TextBox());
			this->table12 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox12 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox12 = (gcnew System::Windows::Forms::TextBox());
			this->dayTxtBlkSat = (gcnew System::Windows::Forms::TextBox());
			this->dayTxtBlkFri = (gcnew System::Windows::Forms::TextBox());
			this->dayTxtBlkThur = (gcnew System::Windows::Forms::TextBox());
			this->dayTxtBlkTue = (gcnew System::Windows::Forms::TextBox());
			this->dayTxtBlkSun = (gcnew System::Windows::Forms::TextBox());
			this->dayTxtBlkMon = (gcnew System::Windows::Forms::TextBox());
			this->table11 = (gcnew System::Windows::Forms::TableLayoutPanel());
			this->taskBox11 = (gcnew System::Windows::Forms::TextBox());
			this->dateBox11 = (gcnew System::Windows::Forms::TextBox());
			this->dayTxtBlkWed = (gcnew System::Windows::Forms::TextBox());
			this->userInputBox = (gcnew System::Windows::Forms::TextBox());
			this->monthFormTitle = (gcnew System::Windows::Forms::TextBox());
			this->sideBar = (gcnew System::Windows::Forms::TextBox());
			this->sideBarTitle = (gcnew System::Windows::Forms::TextBox());
			this->feedBackBox = (gcnew System::Windows::Forms::TextBox());
			this->resetButton = (gcnew System::Windows::Forms::Button());
			this->monthPanel->SuspendLayout();
			this->table63->SuspendLayout();
			this->table62->SuspendLayout();
			this->table61->SuspendLayout();
			this->table64->SuspendLayout();
			this->table67->SuspendLayout();
			this->table66->SuspendLayout();
			this->table65->SuspendLayout();
			this->table51->SuspendLayout();
			this->table57->SuspendLayout();
			this->table56->SuspendLayout();
			this->table55->SuspendLayout();
			this->table54->SuspendLayout();
			this->table53->SuspendLayout();
			this->table52->SuspendLayout();
			this->table47->SuspendLayout();
			this->table46->SuspendLayout();
			this->tableLayoutPanel26->SuspendLayout();
			this->table44->SuspendLayout();
			this->table43->SuspendLayout();
			this->table42->SuspendLayout();
			this->tableLayoutPanel22->SuspendLayout();
			this->table37->SuspendLayout();
			this->table36->SuspendLayout();
			this->table35->SuspendLayout();
			this->table34->SuspendLayout();
			this->table33->SuspendLayout();
			this->table32->SuspendLayout();
			this->table31->SuspendLayout();
			this->table27->SuspendLayout();
			this->table26->SuspendLayout();
			this->table25->SuspendLayout();
			this->table24->SuspendLayout();
			this->table23->SuspendLayout();
			this->table22->SuspendLayout();
			this->table21->SuspendLayout();
			this->table17->SuspendLayout();
			this->table16->SuspendLayout();
			this->table15->SuspendLayout();
			this->table14->SuspendLayout();
			this->table13->SuspendLayout();
			this->table12->SuspendLayout();
			this->table11->SuspendLayout();
			this->SuspendLayout();
			// 
			// monthPanel
			// 
			this->monthPanel->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->monthPanel->CellBorderStyle = System::Windows::Forms::TableLayoutPanelCellBorderStyle::Inset;
			this->monthPanel->ColumnCount = 7;
			this->monthPanel->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 14.28571F)));
			this->monthPanel->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 14.28572F)));
			this->monthPanel->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 14.28572F)));
			this->monthPanel->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 14.28572F)));
			this->monthPanel->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 14.28572F)));
			this->monthPanel->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 14.28572F)));
			this->monthPanel->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 14.28572F)));
			this->monthPanel->Controls->Add(this->table63, 0, 6);
			this->monthPanel->Controls->Add(this->table62, 0, 6);
			this->monthPanel->Controls->Add(this->table61, 0, 6);
			this->monthPanel->Controls->Add(this->table64, 0, 6);
			this->monthPanel->Controls->Add(this->table67, 0, 6);
			this->monthPanel->Controls->Add(this->table66, 0, 6);
			this->monthPanel->Controls->Add(this->table65, 0, 6);
			this->monthPanel->Controls->Add(this->table51, 0, 5);
			this->monthPanel->Controls->Add(this->table57, 6, 5);
			this->monthPanel->Controls->Add(this->table56, 5, 5);
			this->monthPanel->Controls->Add(this->table55, 4, 5);
			this->monthPanel->Controls->Add(this->table54, 3, 5);
			this->monthPanel->Controls->Add(this->table53, 2, 5);
			this->monthPanel->Controls->Add(this->table52, 1, 5);
			this->monthPanel->Controls->Add(this->table47, 6, 4);
			this->monthPanel->Controls->Add(this->table46, 5, 4);
			this->monthPanel->Controls->Add(this->tableLayoutPanel26, 4, 4);
			this->monthPanel->Controls->Add(this->table44, 3, 4);
			this->monthPanel->Controls->Add(this->table43, 2, 4);
			this->monthPanel->Controls->Add(this->table42, 1, 4);
			this->monthPanel->Controls->Add(this->tableLayoutPanel22, 0, 4);
			this->monthPanel->Controls->Add(this->table37, 6, 3);
			this->monthPanel->Controls->Add(this->table36, 5, 3);
			this->monthPanel->Controls->Add(this->table35, 4, 3);
			this->monthPanel->Controls->Add(this->table34, 3, 3);
			this->monthPanel->Controls->Add(this->table33, 2, 3);
			this->monthPanel->Controls->Add(this->table32, 1, 3);
			this->monthPanel->Controls->Add(this->table31, 0, 3);
			this->monthPanel->Controls->Add(this->table27, 6, 2);
			this->monthPanel->Controls->Add(this->table26, 5, 2);
			this->monthPanel->Controls->Add(this->table25, 4, 2);
			this->monthPanel->Controls->Add(this->table24, 3, 2);
			this->monthPanel->Controls->Add(this->table23, 2, 2);
			this->monthPanel->Controls->Add(this->table22, 1, 2);
			this->monthPanel->Controls->Add(this->table21, 0, 2);
			this->monthPanel->Controls->Add(this->table17, 6, 1);
			this->monthPanel->Controls->Add(this->table16, 5, 1);
			this->monthPanel->Controls->Add(this->table15, 4, 1);
			this->monthPanel->Controls->Add(this->table14, 3, 1);
			this->monthPanel->Controls->Add(this->table13, 2, 1);
			this->monthPanel->Controls->Add(this->table12, 1, 1);
			this->monthPanel->Controls->Add(this->dayTxtBlkSat, 6, 0);
			this->monthPanel->Controls->Add(this->dayTxtBlkFri, 5, 0);
			this->monthPanel->Controls->Add(this->dayTxtBlkThur, 4, 0);
			this->monthPanel->Controls->Add(this->dayTxtBlkTue, 2, 0);
			this->monthPanel->Controls->Add(this->dayTxtBlkSun, 0, 0);
			this->monthPanel->Controls->Add(this->dayTxtBlkMon, 1, 0);
			this->monthPanel->Controls->Add(this->table11, 0, 1);
			this->monthPanel->Controls->Add(this->dayTxtBlkWed, 3, 0);
			this->monthPanel->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12));
			this->monthPanel->Location = System::Drawing::Point(291, 31);
			this->monthPanel->Name = L"monthPanel";
			this->monthPanel->RowCount = 7;
			this->monthPanel->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 4.273247F)));
			this->monthPanel->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 16.02568F)));
			this->monthPanel->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 17.09406F)));
			this->monthPanel->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 15.59833F)));
			this->monthPanel->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 15.59833F)));
			this->monthPanel->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 15.87611F)));
			this->monthPanel->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 15.53423F)));
			this->monthPanel->Size = System::Drawing::Size(980, 513);
			this->monthPanel->TabIndex = 0;
			this->monthPanel->Paint += gcnew System::Windows::Forms::PaintEventHandler(this, &MonthForm::monthPanel_Paint);
			// 
			// table63
			// 
			this->table63->ColumnCount = 1;
			this->table63->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table63->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table63->Controls->Add(this->taskBox63, 0, 1);
			this->table63->Controls->Add(this->dateBox63, 0, 0);
			this->table63->Location = System::Drawing::Point(283, 433);
			this->table63->Name = L"table63";
			this->table63->RowCount = 2;
			this->table63->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table63->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table63->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Absolute, 20)));
			this->table63->Size = System::Drawing::Size(131, 75);
			this->table63->TabIndex = 49;
			// 
			// taskBox63
			// 
			this->taskBox63->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox63->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox63->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox63->ForeColor = System::Drawing::Color::White;
			this->taskBox63->Location = System::Drawing::Point(3, 22);
			this->taskBox63->Multiline = true;
			this->taskBox63->Name = L"taskBox63";
			this->taskBox63->ReadOnly = true;
			this->taskBox63->Size = System::Drawing::Size(125, 50);
			this->taskBox63->TabIndex = 1;
			this->taskBox63->TabStop = false;
			// 
			// dateBox63
			// 
			this->dateBox63->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox63->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox63->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox63->ForeColor = System::Drawing::Color::White;
			this->dateBox63->Location = System::Drawing::Point(3, 3);
			this->dateBox63->Name = L"dateBox63";
			this->dateBox63->ReadOnly = true;
			this->dateBox63->Size = System::Drawing::Size(125, 14);
			this->dateBox63->TabIndex = 0;
			this->dateBox63->TabStop = false;
			// 
			// table62
			// 
			this->table62->ColumnCount = 1;
			this->table62->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table62->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table62->Controls->Add(this->taskBox62, 0, 1);
			this->table62->Controls->Add(this->dateBox62, 0, 0);
			this->table62->Location = System::Drawing::Point(144, 433);
			this->table62->Name = L"table62";
			this->table62->RowCount = 2;
			this->table62->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table62->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table62->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Absolute, 20)));
			this->table62->Size = System::Drawing::Size(131, 75);
			this->table62->TabIndex = 48;
			// 
			// taskBox62
			// 
			this->taskBox62->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox62->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox62->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox62->ForeColor = System::Drawing::Color::White;
			this->taskBox62->Location = System::Drawing::Point(3, 22);
			this->taskBox62->Multiline = true;
			this->taskBox62->Name = L"taskBox62";
			this->taskBox62->ReadOnly = true;
			this->taskBox62->Size = System::Drawing::Size(125, 50);
			this->taskBox62->TabIndex = 1;
			this->taskBox62->TabStop = false;
			// 
			// dateBox62
			// 
			this->dateBox62->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox62->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox62->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox62->ForeColor = System::Drawing::Color::White;
			this->dateBox62->Location = System::Drawing::Point(3, 3);
			this->dateBox62->Name = L"dateBox62";
			this->dateBox62->ReadOnly = true;
			this->dateBox62->Size = System::Drawing::Size(125, 14);
			this->dateBox62->TabIndex = 0;
			this->dateBox62->TabStop = false;
			// 
			// table61
			// 
			this->table61->ColumnCount = 1;
			this->table61->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table61->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table61->Controls->Add(this->taskBox61, 0, 1);
			this->table61->Controls->Add(this->dateBox61, 0, 0);
			this->table61->Location = System::Drawing::Point(5, 433);
			this->table61->Name = L"table61";
			this->table61->RowCount = 2;
			this->table61->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table61->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table61->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Absolute, 20)));
			this->table61->Size = System::Drawing::Size(131, 75);
			this->table61->TabIndex = 47;
			// 
			// taskBox61
			// 
			this->taskBox61->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox61->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox61->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox61->ForeColor = System::Drawing::Color::White;
			this->taskBox61->Location = System::Drawing::Point(3, 22);
			this->taskBox61->Multiline = true;
			this->taskBox61->Name = L"taskBox61";
			this->taskBox61->ReadOnly = true;
			this->taskBox61->Size = System::Drawing::Size(125, 50);
			this->taskBox61->TabIndex = 1;
			this->taskBox61->TabStop = false;
			// 
			// dateBox61
			// 
			this->dateBox61->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox61->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox61->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox61->ForeColor = System::Drawing::Color::White;
			this->dateBox61->Location = System::Drawing::Point(3, 3);
			this->dateBox61->Name = L"dateBox61";
			this->dateBox61->ReadOnly = true;
			this->dateBox61->Size = System::Drawing::Size(125, 14);
			this->dateBox61->TabIndex = 0;
			this->dateBox61->TabStop = false;
			// 
			// table64
			// 
			this->table64->ColumnCount = 1;
			this->table64->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table64->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table64->Controls->Add(this->taskBox64, 0, 1);
			this->table64->Controls->Add(this->dateBox64, 0, 0);
			this->table64->Location = System::Drawing::Point(422, 433);
			this->table64->Name = L"table64";
			this->table64->RowCount = 2;
			this->table64->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table64->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table64->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Absolute, 20)));
			this->table64->Size = System::Drawing::Size(131, 75);
			this->table64->TabIndex = 46;
			// 
			// taskBox64
			// 
			this->taskBox64->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox64->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox64->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox64->ForeColor = System::Drawing::Color::White;
			this->taskBox64->Location = System::Drawing::Point(3, 22);
			this->taskBox64->Multiline = true;
			this->taskBox64->Name = L"taskBox64";
			this->taskBox64->ReadOnly = true;
			this->taskBox64->Size = System::Drawing::Size(125, 50);
			this->taskBox64->TabIndex = 1;
			this->taskBox64->TabStop = false;
			// 
			// dateBox64
			// 
			this->dateBox64->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox64->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox64->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox64->ForeColor = System::Drawing::Color::White;
			this->dateBox64->Location = System::Drawing::Point(3, 3);
			this->dateBox64->Name = L"dateBox64";
			this->dateBox64->ReadOnly = true;
			this->dateBox64->Size = System::Drawing::Size(125, 14);
			this->dateBox64->TabIndex = 0;
			this->dateBox64->TabStop = false;
			// 
			// table67
			// 
			this->table67->ColumnCount = 1;
			this->table67->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table67->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table67->Controls->Add(this->taskBox67, 0, 1);
			this->table67->Controls->Add(this->dateBox67, 0, 0);
			this->table67->Location = System::Drawing::Point(839, 433);
			this->table67->Name = L"table67";
			this->table67->RowCount = 2;
			this->table67->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table67->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table67->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Absolute, 20)));
			this->table67->Size = System::Drawing::Size(136, 75);
			this->table67->TabIndex = 45;
			// 
			// taskBox67
			// 
			this->taskBox67->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox67->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox67->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox67->ForeColor = System::Drawing::Color::White;
			this->taskBox67->Location = System::Drawing::Point(3, 22);
			this->taskBox67->Multiline = true;
			this->taskBox67->Name = L"taskBox67";
			this->taskBox67->ReadOnly = true;
			this->taskBox67->Size = System::Drawing::Size(128, 50);
			this->taskBox67->TabIndex = 1;
			this->taskBox67->TabStop = false;
			// 
			// dateBox67
			// 
			this->dateBox67->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox67->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox67->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox67->ForeColor = System::Drawing::Color::White;
			this->dateBox67->Location = System::Drawing::Point(3, 3);
			this->dateBox67->Name = L"dateBox67";
			this->dateBox67->ReadOnly = true;
			this->dateBox67->Size = System::Drawing::Size(130, 14);
			this->dateBox67->TabIndex = 0;
			this->dateBox67->TabStop = false;
			// 
			// table66
			// 
			this->table66->ColumnCount = 1;
			this->table66->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table66->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table66->Controls->Add(this->taskBox66, 0, 1);
			this->table66->Controls->Add(this->dateBox66, 0, 0);
			this->table66->Location = System::Drawing::Point(700, 433);
			this->table66->Name = L"table66";
			this->table66->RowCount = 2;
			this->table66->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table66->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table66->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Absolute, 20)));
			this->table66->Size = System::Drawing::Size(131, 75);
			this->table66->TabIndex = 44;
			// 
			// taskBox66
			// 
			this->taskBox66->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox66->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox66->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox66->ForeColor = System::Drawing::Color::White;
			this->taskBox66->Location = System::Drawing::Point(3, 22);
			this->taskBox66->Multiline = true;
			this->taskBox66->Name = L"taskBox66";
			this->taskBox66->ReadOnly = true;
			this->taskBox66->Size = System::Drawing::Size(125, 50);
			this->taskBox66->TabIndex = 1;
			this->taskBox66->TabStop = false;
			// 
			// dateBox66
			// 
			this->dateBox66->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox66->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox66->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox66->ForeColor = System::Drawing::Color::White;
			this->dateBox66->Location = System::Drawing::Point(3, 3);
			this->dateBox66->Name = L"dateBox66";
			this->dateBox66->ReadOnly = true;
			this->dateBox66->Size = System::Drawing::Size(125, 14);
			this->dateBox66->TabIndex = 0;
			this->dateBox66->TabStop = false;
			// 
			// table65
			// 
			this->table65->ColumnCount = 1;
			this->table65->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table65->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table65->Controls->Add(this->taskBox65, 0, 1);
			this->table65->Controls->Add(this->dateBox65, 0, 0);
			this->table65->Location = System::Drawing::Point(561, 433);
			this->table65->Name = L"table65";
			this->table65->RowCount = 2;
			this->table65->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table65->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table65->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Absolute, 20)));
			this->table65->Size = System::Drawing::Size(131, 75);
			this->table65->TabIndex = 43;
			// 
			// taskBox65
			// 
			this->taskBox65->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox65->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox65->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox65->ForeColor = System::Drawing::Color::White;
			this->taskBox65->Location = System::Drawing::Point(3, 22);
			this->taskBox65->Multiline = true;
			this->taskBox65->Name = L"taskBox65";
			this->taskBox65->ReadOnly = true;
			this->taskBox65->Size = System::Drawing::Size(125, 50);
			this->taskBox65->TabIndex = 1;
			this->taskBox65->TabStop = false;
			// 
			// dateBox65
			// 
			this->dateBox65->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox65->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox65->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox65->ForeColor = System::Drawing::Color::White;
			this->dateBox65->Location = System::Drawing::Point(3, 3);
			this->dateBox65->Name = L"dateBox65";
			this->dateBox65->ReadOnly = true;
			this->dateBox65->Size = System::Drawing::Size(125, 14);
			this->dateBox65->TabIndex = 0;
			this->dateBox65->TabStop = false;
			// 
			// table51
			// 
			this->table51->ColumnCount = 1;
			this->table51->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table51->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table51->Controls->Add(this->taskBox51, 0, 1);
			this->table51->Controls->Add(this->dateBox51, 0, 0);
			this->table51->Location = System::Drawing::Point(5, 353);
			this->table51->Name = L"table51";
			this->table51->RowCount = 2;
			this->table51->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table51->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table51->Size = System::Drawing::Size(131, 72);
			this->table51->TabIndex = 42;
			// 
			// taskBox51
			// 
			this->taskBox51->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox51->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox51->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox51->ForeColor = System::Drawing::Color::White;
			this->taskBox51->Location = System::Drawing::Point(3, 21);
			this->taskBox51->Multiline = true;
			this->taskBox51->Name = L"taskBox51";
			this->taskBox51->ReadOnly = true;
			this->taskBox51->Size = System::Drawing::Size(125, 48);
			this->taskBox51->TabIndex = 1;
			this->taskBox51->TabStop = false;
			// 
			// dateBox51
			// 
			this->dateBox51->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox51->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox51->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox51->ForeColor = System::Drawing::Color::White;
			this->dateBox51->Location = System::Drawing::Point(3, 3);
			this->dateBox51->Name = L"dateBox51";
			this->dateBox51->ReadOnly = true;
			this->dateBox51->Size = System::Drawing::Size(125, 14);
			this->dateBox51->TabIndex = 0;
			this->dateBox51->TabStop = false;
			// 
			// table57
			// 
			this->table57->ColumnCount = 1;
			this->table57->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table57->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table57->Controls->Add(this->taskBox57, 0, 1);
			this->table57->Controls->Add(this->dateBox57, 0, 0);
			this->table57->Location = System::Drawing::Point(839, 353);
			this->table57->Name = L"table57";
			this->table57->RowCount = 2;
			this->table57->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table57->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table57->Size = System::Drawing::Size(136, 72);
			this->table57->TabIndex = 41;
			// 
			// taskBox57
			// 
			this->taskBox57->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox57->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox57->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox57->ForeColor = System::Drawing::Color::White;
			this->taskBox57->Location = System::Drawing::Point(3, 21);
			this->taskBox57->Multiline = true;
			this->taskBox57->Name = L"taskBox57";
			this->taskBox57->ReadOnly = true;
			this->taskBox57->Size = System::Drawing::Size(130, 48);
			this->taskBox57->TabIndex = 1;
			this->taskBox57->TabStop = false;
			// 
			// dateBox57
			// 
			this->dateBox57->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox57->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox57->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox57->ForeColor = System::Drawing::Color::White;
			this->dateBox57->Location = System::Drawing::Point(3, 3);
			this->dateBox57->Name = L"dateBox57";
			this->dateBox57->ReadOnly = true;
			this->dateBox57->Size = System::Drawing::Size(130, 14);
			this->dateBox57->TabIndex = 0;
			this->dateBox57->TabStop = false;
			// 
			// table56
			// 
			this->table56->ColumnCount = 1;
			this->table56->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table56->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table56->Controls->Add(this->taskBox56, 0, 1);
			this->table56->Controls->Add(this->dateBox56, 0, 0);
			this->table56->Location = System::Drawing::Point(700, 353);
			this->table56->Name = L"table56";
			this->table56->RowCount = 2;
			this->table56->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table56->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table56->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Absolute, 20)));
			this->table56->Size = System::Drawing::Size(131, 72);
			this->table56->TabIndex = 40;
			// 
			// taskBox56
			// 
			this->taskBox56->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox56->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox56->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox56->ForeColor = System::Drawing::Color::White;
			this->taskBox56->Location = System::Drawing::Point(3, 21);
			this->taskBox56->Multiline = true;
			this->taskBox56->Name = L"taskBox56";
			this->taskBox56->ReadOnly = true;
			this->taskBox56->Size = System::Drawing::Size(125, 48);
			this->taskBox56->TabIndex = 1;
			this->taskBox56->TabStop = false;
			// 
			// dateBox56
			// 
			this->dateBox56->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox56->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox56->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox56->ForeColor = System::Drawing::Color::White;
			this->dateBox56->Location = System::Drawing::Point(3, 3);
			this->dateBox56->Name = L"dateBox56";
			this->dateBox56->ReadOnly = true;
			this->dateBox56->Size = System::Drawing::Size(125, 14);
			this->dateBox56->TabIndex = 0;
			this->dateBox56->TabStop = false;
			// 
			// table55
			// 
			this->table55->ColumnCount = 1;
			this->table55->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table55->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table55->Controls->Add(this->taskBox55, 0, 1);
			this->table55->Controls->Add(this->dateBox55, 0, 0);
			this->table55->Location = System::Drawing::Point(561, 353);
			this->table55->Name = L"table55";
			this->table55->RowCount = 2;
			this->table55->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table55->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table55->Size = System::Drawing::Size(131, 72);
			this->table55->TabIndex = 39;
			// 
			// taskBox55
			// 
			this->taskBox55->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox55->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox55->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox55->ForeColor = System::Drawing::Color::White;
			this->taskBox55->Location = System::Drawing::Point(3, 21);
			this->taskBox55->Multiline = true;
			this->taskBox55->Name = L"taskBox55";
			this->taskBox55->ReadOnly = true;
			this->taskBox55->Size = System::Drawing::Size(125, 48);
			this->taskBox55->TabIndex = 1;
			this->taskBox55->TabStop = false;
			// 
			// dateBox55
			// 
			this->dateBox55->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox55->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox55->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox55->ForeColor = System::Drawing::Color::White;
			this->dateBox55->Location = System::Drawing::Point(3, 3);
			this->dateBox55->Name = L"dateBox55";
			this->dateBox55->ReadOnly = true;
			this->dateBox55->Size = System::Drawing::Size(125, 14);
			this->dateBox55->TabIndex = 0;
			this->dateBox55->TabStop = false;
			// 
			// table54
			// 
			this->table54->ColumnCount = 1;
			this->table54->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table54->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table54->Controls->Add(this->taskBox54, 0, 1);
			this->table54->Controls->Add(this->dateBox54, 0, 0);
			this->table54->Location = System::Drawing::Point(422, 353);
			this->table54->Name = L"table54";
			this->table54->RowCount = 2;
			this->table54->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table54->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table54->Size = System::Drawing::Size(131, 72);
			this->table54->TabIndex = 38;
			// 
			// taskBox54
			// 
			this->taskBox54->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox54->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox54->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox54->ForeColor = System::Drawing::Color::White;
			this->taskBox54->Location = System::Drawing::Point(3, 21);
			this->taskBox54->Multiline = true;
			this->taskBox54->Name = L"taskBox54";
			this->taskBox54->ReadOnly = true;
			this->taskBox54->Size = System::Drawing::Size(125, 48);
			this->taskBox54->TabIndex = 1;
			this->taskBox54->TabStop = false;
			// 
			// dateBox54
			// 
			this->dateBox54->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox54->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox54->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox54->ForeColor = System::Drawing::Color::White;
			this->dateBox54->Location = System::Drawing::Point(3, 3);
			this->dateBox54->Name = L"dateBox54";
			this->dateBox54->ReadOnly = true;
			this->dateBox54->Size = System::Drawing::Size(125, 14);
			this->dateBox54->TabIndex = 0;
			this->dateBox54->TabStop = false;
			// 
			// table53
			// 
			this->table53->ColumnCount = 1;
			this->table53->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table53->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table53->Controls->Add(this->taskBox53, 0, 1);
			this->table53->Controls->Add(this->dateBox53, 0, 0);
			this->table53->Location = System::Drawing::Point(283, 353);
			this->table53->Name = L"table53";
			this->table53->RowCount = 2;
			this->table53->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table53->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table53->Size = System::Drawing::Size(131, 72);
			this->table53->TabIndex = 37;
			// 
			// taskBox53
			// 
			this->taskBox53->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox53->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox53->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox53->ForeColor = System::Drawing::Color::White;
			this->taskBox53->Location = System::Drawing::Point(3, 21);
			this->taskBox53->Multiline = true;
			this->taskBox53->Name = L"taskBox53";
			this->taskBox53->ReadOnly = true;
			this->taskBox53->Size = System::Drawing::Size(125, 48);
			this->taskBox53->TabIndex = 1;
			this->taskBox53->TabStop = false;
			// 
			// dateBox53
			// 
			this->dateBox53->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox53->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox53->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox53->ForeColor = System::Drawing::Color::White;
			this->dateBox53->Location = System::Drawing::Point(3, 3);
			this->dateBox53->Name = L"dateBox53";
			this->dateBox53->ReadOnly = true;
			this->dateBox53->Size = System::Drawing::Size(125, 14);
			this->dateBox53->TabIndex = 0;
			this->dateBox53->TabStop = false;
			// 
			// table52
			// 
			this->table52->ColumnCount = 1;
			this->table52->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table52->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table52->Controls->Add(this->taskBox52, 0, 1);
			this->table52->Controls->Add(this->dateBox52, 0, 0);
			this->table52->Location = System::Drawing::Point(144, 353);
			this->table52->Name = L"table52";
			this->table52->RowCount = 2;
			this->table52->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table52->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table52->Size = System::Drawing::Size(131, 72);
			this->table52->TabIndex = 36;
			// 
			// taskBox52
			// 
			this->taskBox52->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox52->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox52->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox52->ForeColor = System::Drawing::Color::White;
			this->taskBox52->Location = System::Drawing::Point(3, 21);
			this->taskBox52->Multiline = true;
			this->taskBox52->Name = L"taskBox52";
			this->taskBox52->ReadOnly = true;
			this->taskBox52->Size = System::Drawing::Size(125, 48);
			this->taskBox52->TabIndex = 1;
			this->taskBox52->TabStop = false;
			// 
			// dateBox52
			// 
			this->dateBox52->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox52->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox52->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox52->ForeColor = System::Drawing::Color::White;
			this->dateBox52->Location = System::Drawing::Point(3, 3);
			this->dateBox52->Name = L"dateBox52";
			this->dateBox52->ReadOnly = true;
			this->dateBox52->Size = System::Drawing::Size(125, 14);
			this->dateBox52->TabIndex = 0;
			this->dateBox52->TabStop = false;
			// 
			// table47
			// 
			this->table47->ColumnCount = 1;
			this->table47->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table47->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table47->Controls->Add(this->taskBox47, 0, 1);
			this->table47->Controls->Add(this->dateBox47, 0, 0);
			this->table47->Location = System::Drawing::Point(839, 274);
			this->table47->Name = L"table47";
			this->table47->RowCount = 2;
			this->table47->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table47->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table47->Size = System::Drawing::Size(136, 71);
			this->table47->TabIndex = 35;
			// 
			// taskBox47
			// 
			this->taskBox47->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox47->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox47->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox47->ForeColor = System::Drawing::Color::White;
			this->taskBox47->Location = System::Drawing::Point(3, 21);
			this->taskBox47->Multiline = true;
			this->taskBox47->Name = L"taskBox47";
			this->taskBox47->ReadOnly = true;
			this->taskBox47->Size = System::Drawing::Size(130, 47);
			this->taskBox47->TabIndex = 1;
			this->taskBox47->TabStop = false;
			// 
			// dateBox47
			// 
			this->dateBox47->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox47->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox47->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox47->ForeColor = System::Drawing::Color::White;
			this->dateBox47->Location = System::Drawing::Point(3, 3);
			this->dateBox47->Name = L"dateBox47";
			this->dateBox47->ReadOnly = true;
			this->dateBox47->Size = System::Drawing::Size(130, 14);
			this->dateBox47->TabIndex = 0;
			this->dateBox47->TabStop = false;
			// 
			// table46
			// 
			this->table46->ColumnCount = 1;
			this->table46->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table46->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table46->Controls->Add(this->taskBox46, 0, 1);
			this->table46->Controls->Add(this->dateBox46, 0, 0);
			this->table46->Location = System::Drawing::Point(700, 274);
			this->table46->Name = L"table46";
			this->table46->RowCount = 2;
			this->table46->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table46->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table46->Size = System::Drawing::Size(131, 71);
			this->table46->TabIndex = 34;
			// 
			// taskBox46
			// 
			this->taskBox46->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox46->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox46->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox46->ForeColor = System::Drawing::Color::White;
			this->taskBox46->Location = System::Drawing::Point(3, 21);
			this->taskBox46->Multiline = true;
			this->taskBox46->Name = L"taskBox46";
			this->taskBox46->ReadOnly = true;
			this->taskBox46->Size = System::Drawing::Size(125, 47);
			this->taskBox46->TabIndex = 1;
			this->taskBox46->TabStop = false;
			// 
			// dateBox46
			// 
			this->dateBox46->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox46->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox46->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox46->ForeColor = System::Drawing::Color::White;
			this->dateBox46->Location = System::Drawing::Point(3, 3);
			this->dateBox46->Name = L"dateBox46";
			this->dateBox46->ReadOnly = true;
			this->dateBox46->Size = System::Drawing::Size(125, 14);
			this->dateBox46->TabIndex = 0;
			this->dateBox46->TabStop = false;
			// 
			// tableLayoutPanel26
			// 
			this->tableLayoutPanel26->ColumnCount = 1;
			this->tableLayoutPanel26->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent,
				35.52632F)));
			this->tableLayoutPanel26->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent,
				64.47369F)));
			this->tableLayoutPanel26->Controls->Add(this->taskBox45, 0, 1);
			this->tableLayoutPanel26->Controls->Add(this->dateBox45, 0, 0);
			this->tableLayoutPanel26->Location = System::Drawing::Point(561, 274);
			this->tableLayoutPanel26->Name = L"tableLayoutPanel26";
			this->tableLayoutPanel26->RowCount = 2;
			this->tableLayoutPanel26->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->tableLayoutPanel26->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->tableLayoutPanel26->Size = System::Drawing::Size(131, 71);
			this->tableLayoutPanel26->TabIndex = 33;
			// 
			// taskBox45
			// 
			this->taskBox45->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox45->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox45->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox45->ForeColor = System::Drawing::Color::White;
			this->taskBox45->Location = System::Drawing::Point(3, 21);
			this->taskBox45->Multiline = true;
			this->taskBox45->Name = L"taskBox45";
			this->taskBox45->ReadOnly = true;
			this->taskBox45->Size = System::Drawing::Size(125, 47);
			this->taskBox45->TabIndex = 1;
			this->taskBox45->TabStop = false;
			// 
			// dateBox45
			// 
			this->dateBox45->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox45->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox45->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox45->ForeColor = System::Drawing::Color::White;
			this->dateBox45->Location = System::Drawing::Point(3, 3);
			this->dateBox45->Name = L"dateBox45";
			this->dateBox45->ReadOnly = true;
			this->dateBox45->Size = System::Drawing::Size(125, 14);
			this->dateBox45->TabIndex = 0;
			this->dateBox45->TabStop = false;
			// 
			// table44
			// 
			this->table44->ColumnCount = 1;
			this->table44->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table44->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table44->Controls->Add(this->taskBox44, 0, 1);
			this->table44->Controls->Add(this->dateBox44, 0, 0);
			this->table44->Location = System::Drawing::Point(422, 274);
			this->table44->Name = L"table44";
			this->table44->RowCount = 2;
			this->table44->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table44->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table44->Size = System::Drawing::Size(131, 71);
			this->table44->TabIndex = 32;
			// 
			// taskBox44
			// 
			this->taskBox44->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox44->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox44->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox44->ForeColor = System::Drawing::Color::White;
			this->taskBox44->Location = System::Drawing::Point(3, 21);
			this->taskBox44->Multiline = true;
			this->taskBox44->Name = L"taskBox44";
			this->taskBox44->ReadOnly = true;
			this->taskBox44->Size = System::Drawing::Size(125, 47);
			this->taskBox44->TabIndex = 1;
			this->taskBox44->TabStop = false;
			// 
			// dateBox44
			// 
			this->dateBox44->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox44->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox44->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox44->ForeColor = System::Drawing::Color::White;
			this->dateBox44->Location = System::Drawing::Point(3, 3);
			this->dateBox44->Name = L"dateBox44";
			this->dateBox44->ReadOnly = true;
			this->dateBox44->Size = System::Drawing::Size(125, 14);
			this->dateBox44->TabIndex = 0;
			this->dateBox44->TabStop = false;
			// 
			// table43
			// 
			this->table43->ColumnCount = 1;
			this->table43->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table43->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table43->Controls->Add(this->taskBox43, 0, 1);
			this->table43->Controls->Add(this->dateBox43, 0, 0);
			this->table43->Location = System::Drawing::Point(283, 274);
			this->table43->Name = L"table43";
			this->table43->RowCount = 2;
			this->table43->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table43->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table43->Size = System::Drawing::Size(131, 71);
			this->table43->TabIndex = 31;
			// 
			// taskBox43
			// 
			this->taskBox43->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox43->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox43->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox43->ForeColor = System::Drawing::Color::White;
			this->taskBox43->Location = System::Drawing::Point(3, 21);
			this->taskBox43->Multiline = true;
			this->taskBox43->Name = L"taskBox43";
			this->taskBox43->ReadOnly = true;
			this->taskBox43->Size = System::Drawing::Size(125, 47);
			this->taskBox43->TabIndex = 1;
			this->taskBox43->TabStop = false;
			// 
			// dateBox43
			// 
			this->dateBox43->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox43->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox43->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox43->ForeColor = System::Drawing::Color::White;
			this->dateBox43->Location = System::Drawing::Point(3, 3);
			this->dateBox43->Name = L"dateBox43";
			this->dateBox43->ReadOnly = true;
			this->dateBox43->Size = System::Drawing::Size(125, 14);
			this->dateBox43->TabIndex = 0;
			this->dateBox43->TabStop = false;
			// 
			// table42
			// 
			this->table42->ColumnCount = 1;
			this->table42->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table42->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table42->Controls->Add(this->taskBox42, 0, 1);
			this->table42->Controls->Add(this->dateBox42, 0, 0);
			this->table42->Location = System::Drawing::Point(144, 274);
			this->table42->Name = L"table42";
			this->table42->RowCount = 2;
			this->table42->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table42->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table42->Size = System::Drawing::Size(131, 71);
			this->table42->TabIndex = 30;
			// 
			// taskBox42
			// 
			this->taskBox42->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox42->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox42->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox42->ForeColor = System::Drawing::Color::White;
			this->taskBox42->Location = System::Drawing::Point(3, 21);
			this->taskBox42->Multiline = true;
			this->taskBox42->Name = L"taskBox42";
			this->taskBox42->ReadOnly = true;
			this->taskBox42->Size = System::Drawing::Size(125, 47);
			this->taskBox42->TabIndex = 1;
			this->taskBox42->TabStop = false;
			// 
			// dateBox42
			// 
			this->dateBox42->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox42->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox42->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox42->ForeColor = System::Drawing::Color::White;
			this->dateBox42->Location = System::Drawing::Point(3, 3);
			this->dateBox42->Name = L"dateBox42";
			this->dateBox42->ReadOnly = true;
			this->dateBox42->Size = System::Drawing::Size(125, 14);
			this->dateBox42->TabIndex = 0;
			this->dateBox42->TabStop = false;
			// 
			// tableLayoutPanel22
			// 
			this->tableLayoutPanel22->ColumnCount = 1;
			this->tableLayoutPanel22->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent,
				35.52632F)));
			this->tableLayoutPanel22->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent,
				64.47369F)));
			this->tableLayoutPanel22->Controls->Add(this->taskBox41, 0, 1);
			this->tableLayoutPanel22->Controls->Add(this->dateBox41, 0, 0);
			this->tableLayoutPanel22->Location = System::Drawing::Point(5, 274);
			this->tableLayoutPanel22->Name = L"tableLayoutPanel22";
			this->tableLayoutPanel22->RowCount = 2;
			this->tableLayoutPanel22->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->tableLayoutPanel22->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->tableLayoutPanel22->Size = System::Drawing::Size(131, 71);
			this->tableLayoutPanel22->TabIndex = 29;
			// 
			// taskBox41
			// 
			this->taskBox41->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox41->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox41->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox41->ForeColor = System::Drawing::Color::White;
			this->taskBox41->Location = System::Drawing::Point(3, 21);
			this->taskBox41->Multiline = true;
			this->taskBox41->Name = L"taskBox41";
			this->taskBox41->ReadOnly = true;
			this->taskBox41->Size = System::Drawing::Size(125, 47);
			this->taskBox41->TabIndex = 1;
			this->taskBox41->TabStop = false;
			// 
			// dateBox41
			// 
			this->dateBox41->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox41->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox41->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox41->ForeColor = System::Drawing::Color::White;
			this->dateBox41->Location = System::Drawing::Point(3, 3);
			this->dateBox41->Name = L"dateBox41";
			this->dateBox41->ReadOnly = true;
			this->dateBox41->Size = System::Drawing::Size(125, 14);
			this->dateBox41->TabIndex = 0;
			this->dateBox41->TabStop = false;
			// 
			// table37
			// 
			this->table37->ColumnCount = 1;
			this->table37->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table37->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table37->Controls->Add(this->taskBox37, 0, 1);
			this->table37->Controls->Add(this->dateBox37, 0, 0);
			this->table37->Location = System::Drawing::Point(839, 195);
			this->table37->Name = L"table37";
			this->table37->RowCount = 2;
			this->table37->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table37->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table37->Size = System::Drawing::Size(136, 71);
			this->table37->TabIndex = 28;
			// 
			// taskBox37
			// 
			this->taskBox37->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox37->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox37->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox37->ForeColor = System::Drawing::Color::White;
			this->taskBox37->Location = System::Drawing::Point(3, 21);
			this->taskBox37->Multiline = true;
			this->taskBox37->Name = L"taskBox37";
			this->taskBox37->ReadOnly = true;
			this->taskBox37->Size = System::Drawing::Size(130, 47);
			this->taskBox37->TabIndex = 1;
			this->taskBox37->TabStop = false;
			// 
			// dateBox37
			// 
			this->dateBox37->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox37->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox37->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox37->ForeColor = System::Drawing::Color::White;
			this->dateBox37->Location = System::Drawing::Point(3, 3);
			this->dateBox37->Name = L"dateBox37";
			this->dateBox37->ReadOnly = true;
			this->dateBox37->Size = System::Drawing::Size(130, 14);
			this->dateBox37->TabIndex = 0;
			this->dateBox37->TabStop = false;
			// 
			// table36
			// 
			this->table36->ColumnCount = 1;
			this->table36->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table36->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table36->Controls->Add(this->taskBox36, 0, 1);
			this->table36->Controls->Add(this->dateBox36, 0, 0);
			this->table36->Location = System::Drawing::Point(700, 195);
			this->table36->Name = L"table36";
			this->table36->RowCount = 2;
			this->table36->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table36->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table36->Size = System::Drawing::Size(131, 71);
			this->table36->TabIndex = 27;
			// 
			// taskBox36
			// 
			this->taskBox36->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox36->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox36->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox36->ForeColor = System::Drawing::Color::White;
			this->taskBox36->Location = System::Drawing::Point(3, 21);
			this->taskBox36->Multiline = true;
			this->taskBox36->Name = L"taskBox36";
			this->taskBox36->ReadOnly = true;
			this->taskBox36->Size = System::Drawing::Size(125, 47);
			this->taskBox36->TabIndex = 1;
			this->taskBox36->TabStop = false;
			// 
			// dateBox36
			// 
			this->dateBox36->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox36->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox36->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox36->ForeColor = System::Drawing::Color::White;
			this->dateBox36->Location = System::Drawing::Point(3, 3);
			this->dateBox36->Name = L"dateBox36";
			this->dateBox36->ReadOnly = true;
			this->dateBox36->Size = System::Drawing::Size(125, 14);
			this->dateBox36->TabIndex = 0;
			this->dateBox36->TabStop = false;
			// 
			// table35
			// 
			this->table35->ColumnCount = 1;
			this->table35->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table35->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table35->Controls->Add(this->taskBox35, 0, 1);
			this->table35->Controls->Add(this->dateBox35, 0, 0);
			this->table35->Location = System::Drawing::Point(561, 195);
			this->table35->Name = L"table35";
			this->table35->RowCount = 2;
			this->table35->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table35->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table35->Size = System::Drawing::Size(131, 71);
			this->table35->TabIndex = 26;
			// 
			// taskBox35
			// 
			this->taskBox35->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox35->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox35->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox35->ForeColor = System::Drawing::Color::White;
			this->taskBox35->Location = System::Drawing::Point(3, 21);
			this->taskBox35->Multiline = true;
			this->taskBox35->Name = L"taskBox35";
			this->taskBox35->ReadOnly = true;
			this->taskBox35->Size = System::Drawing::Size(125, 47);
			this->taskBox35->TabIndex = 1;
			this->taskBox35->TabStop = false;
			// 
			// dateBox35
			// 
			this->dateBox35->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox35->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox35->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox35->ForeColor = System::Drawing::Color::White;
			this->dateBox35->Location = System::Drawing::Point(3, 3);
			this->dateBox35->Name = L"dateBox35";
			this->dateBox35->ReadOnly = true;
			this->dateBox35->Size = System::Drawing::Size(125, 14);
			this->dateBox35->TabIndex = 0;
			this->dateBox35->TabStop = false;
			// 
			// table34
			// 
			this->table34->ColumnCount = 1;
			this->table34->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table34->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table34->Controls->Add(this->taskBox34, 0, 1);
			this->table34->Controls->Add(this->dateBox34, 0, 0);
			this->table34->Location = System::Drawing::Point(422, 195);
			this->table34->Name = L"table34";
			this->table34->RowCount = 2;
			this->table34->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table34->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table34->Size = System::Drawing::Size(131, 71);
			this->table34->TabIndex = 25;
			// 
			// taskBox34
			// 
			this->taskBox34->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox34->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox34->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox34->ForeColor = System::Drawing::Color::White;
			this->taskBox34->Location = System::Drawing::Point(3, 21);
			this->taskBox34->Multiline = true;
			this->taskBox34->Name = L"taskBox34";
			this->taskBox34->ReadOnly = true;
			this->taskBox34->Size = System::Drawing::Size(125, 47);
			this->taskBox34->TabIndex = 1;
			this->taskBox34->TabStop = false;
			// 
			// dateBox34
			// 
			this->dateBox34->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox34->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox34->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox34->ForeColor = System::Drawing::Color::White;
			this->dateBox34->Location = System::Drawing::Point(3, 3);
			this->dateBox34->Name = L"dateBox34";
			this->dateBox34->ReadOnly = true;
			this->dateBox34->Size = System::Drawing::Size(125, 14);
			this->dateBox34->TabIndex = 0;
			this->dateBox34->TabStop = false;
			// 
			// table33
			// 
			this->table33->ColumnCount = 1;
			this->table33->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table33->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table33->Controls->Add(this->taskBox33, 0, 1);
			this->table33->Controls->Add(this->dateBox33, 0, 0);
			this->table33->Location = System::Drawing::Point(283, 195);
			this->table33->Name = L"table33";
			this->table33->RowCount = 2;
			this->table33->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table33->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table33->Size = System::Drawing::Size(131, 71);
			this->table33->TabIndex = 24;
			// 
			// taskBox33
			// 
			this->taskBox33->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox33->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox33->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox33->ForeColor = System::Drawing::Color::White;
			this->taskBox33->Location = System::Drawing::Point(3, 21);
			this->taskBox33->Multiline = true;
			this->taskBox33->Name = L"taskBox33";
			this->taskBox33->ReadOnly = true;
			this->taskBox33->Size = System::Drawing::Size(125, 47);
			this->taskBox33->TabIndex = 1;
			this->taskBox33->TabStop = false;
			// 
			// dateBox33
			// 
			this->dateBox33->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox33->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox33->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox33->ForeColor = System::Drawing::Color::White;
			this->dateBox33->Location = System::Drawing::Point(3, 3);
			this->dateBox33->Name = L"dateBox33";
			this->dateBox33->ReadOnly = true;
			this->dateBox33->Size = System::Drawing::Size(125, 14);
			this->dateBox33->TabIndex = 0;
			this->dateBox33->TabStop = false;
			// 
			// table32
			// 
			this->table32->ColumnCount = 1;
			this->table32->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table32->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table32->Controls->Add(this->taskBox32, 0, 1);
			this->table32->Controls->Add(this->dateBox32, 0, 0);
			this->table32->Location = System::Drawing::Point(144, 195);
			this->table32->Name = L"table32";
			this->table32->RowCount = 2;
			this->table32->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table32->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table32->Size = System::Drawing::Size(131, 71);
			this->table32->TabIndex = 23;
			// 
			// taskBox32
			// 
			this->taskBox32->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox32->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox32->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox32->ForeColor = System::Drawing::Color::White;
			this->taskBox32->Location = System::Drawing::Point(3, 21);
			this->taskBox32->Multiline = true;
			this->taskBox32->Name = L"taskBox32";
			this->taskBox32->ReadOnly = true;
			this->taskBox32->Size = System::Drawing::Size(125, 47);
			this->taskBox32->TabIndex = 1;
			this->taskBox32->TabStop = false;
			// 
			// dateBox32
			// 
			this->dateBox32->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox32->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox32->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox32->ForeColor = System::Drawing::Color::White;
			this->dateBox32->Location = System::Drawing::Point(3, 3);
			this->dateBox32->Name = L"dateBox32";
			this->dateBox32->ReadOnly = true;
			this->dateBox32->Size = System::Drawing::Size(125, 14);
			this->dateBox32->TabIndex = 0;
			this->dateBox32->TabStop = false;
			// 
			// table31
			// 
			this->table31->ColumnCount = 1;
			this->table31->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table31->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table31->Controls->Add(this->taskBox31, 0, 1);
			this->table31->Controls->Add(this->dateBox31, 0, 0);
			this->table31->Location = System::Drawing::Point(5, 195);
			this->table31->Name = L"table31";
			this->table31->RowCount = 2;
			this->table31->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table31->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table31->Size = System::Drawing::Size(131, 71);
			this->table31->TabIndex = 22;
			// 
			// taskBox31
			// 
			this->taskBox31->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox31->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox31->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox31->ForeColor = System::Drawing::Color::White;
			this->taskBox31->Location = System::Drawing::Point(3, 21);
			this->taskBox31->Multiline = true;
			this->taskBox31->Name = L"taskBox31";
			this->taskBox31->ReadOnly = true;
			this->taskBox31->Size = System::Drawing::Size(125, 47);
			this->taskBox31->TabIndex = 1;
			this->taskBox31->TabStop = false;
			// 
			// dateBox31
			// 
			this->dateBox31->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox31->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox31->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox31->ForeColor = System::Drawing::Color::White;
			this->dateBox31->Location = System::Drawing::Point(3, 3);
			this->dateBox31->Name = L"dateBox31";
			this->dateBox31->ReadOnly = true;
			this->dateBox31->Size = System::Drawing::Size(125, 14);
			this->dateBox31->TabIndex = 0;
			this->dateBox31->TabStop = false;
			// 
			// table27
			// 
			this->table27->ColumnCount = 1;
			this->table27->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table27->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table27->Controls->Add(this->taskBox27, 0, 1);
			this->table27->Controls->Add(this->dateBox27, 0, 0);
			this->table27->Location = System::Drawing::Point(839, 109);
			this->table27->Name = L"table27";
			this->table27->RowCount = 2;
			this->table27->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table27->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table27->Size = System::Drawing::Size(136, 78);
			this->table27->TabIndex = 21;
			// 
			// taskBox27
			// 
			this->taskBox27->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox27->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox27->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox27->ForeColor = System::Drawing::Color::White;
			this->taskBox27->Location = System::Drawing::Point(3, 23);
			this->taskBox27->Multiline = true;
			this->taskBox27->Name = L"taskBox27";
			this->taskBox27->ReadOnly = true;
			this->taskBox27->Size = System::Drawing::Size(130, 52);
			this->taskBox27->TabIndex = 1;
			this->taskBox27->TabStop = false;
			// 
			// dateBox27
			// 
			this->dateBox27->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox27->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox27->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox27->ForeColor = System::Drawing::Color::White;
			this->dateBox27->Location = System::Drawing::Point(3, 3);
			this->dateBox27->Name = L"dateBox27";
			this->dateBox27->ReadOnly = true;
			this->dateBox27->Size = System::Drawing::Size(130, 14);
			this->dateBox27->TabIndex = 0;
			this->dateBox27->TabStop = false;
			// 
			// table26
			// 
			this->table26->ColumnCount = 1;
			this->table26->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table26->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table26->Controls->Add(this->taskBox26, 0, 1);
			this->table26->Controls->Add(this->dateBox26, 0, 0);
			this->table26->Location = System::Drawing::Point(700, 109);
			this->table26->Name = L"table26";
			this->table26->RowCount = 2;
			this->table26->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table26->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table26->Size = System::Drawing::Size(131, 78);
			this->table26->TabIndex = 20;
			// 
			// taskBox26
			// 
			this->taskBox26->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox26->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox26->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox26->ForeColor = System::Drawing::Color::White;
			this->taskBox26->Location = System::Drawing::Point(3, 23);
			this->taskBox26->Multiline = true;
			this->taskBox26->Name = L"taskBox26";
			this->taskBox26->ReadOnly = true;
			this->taskBox26->Size = System::Drawing::Size(125, 52);
			this->taskBox26->TabIndex = 1;
			this->taskBox26->TabStop = false;
			// 
			// dateBox26
			// 
			this->dateBox26->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox26->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox26->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox26->ForeColor = System::Drawing::Color::White;
			this->dateBox26->Location = System::Drawing::Point(3, 3);
			this->dateBox26->Name = L"dateBox26";
			this->dateBox26->ReadOnly = true;
			this->dateBox26->Size = System::Drawing::Size(125, 14);
			this->dateBox26->TabIndex = 0;
			this->dateBox26->TabStop = false;
			// 
			// table25
			// 
			this->table25->ColumnCount = 1;
			this->table25->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table25->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table25->Controls->Add(this->taskBox25, 0, 1);
			this->table25->Controls->Add(this->dateBox25, 0, 0);
			this->table25->Location = System::Drawing::Point(561, 109);
			this->table25->Name = L"table25";
			this->table25->RowCount = 2;
			this->table25->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table25->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table25->Size = System::Drawing::Size(131, 78);
			this->table25->TabIndex = 19;
			// 
			// taskBox25
			// 
			this->taskBox25->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox25->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox25->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox25->ForeColor = System::Drawing::Color::White;
			this->taskBox25->Location = System::Drawing::Point(3, 23);
			this->taskBox25->Multiline = true;
			this->taskBox25->Name = L"taskBox25";
			this->taskBox25->ReadOnly = true;
			this->taskBox25->Size = System::Drawing::Size(125, 52);
			this->taskBox25->TabIndex = 1;
			this->taskBox25->TabStop = false;
			// 
			// dateBox25
			// 
			this->dateBox25->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox25->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox25->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox25->ForeColor = System::Drawing::Color::White;
			this->dateBox25->Location = System::Drawing::Point(3, 3);
			this->dateBox25->Name = L"dateBox25";
			this->dateBox25->ReadOnly = true;
			this->dateBox25->Size = System::Drawing::Size(125, 14);
			this->dateBox25->TabIndex = 0;
			this->dateBox25->TabStop = false;
			// 
			// table24
			// 
			this->table24->ColumnCount = 1;
			this->table24->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table24->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table24->Controls->Add(this->taskBox24, 0, 1);
			this->table24->Controls->Add(this->dateBox24, 0, 0);
			this->table24->Location = System::Drawing::Point(422, 109);
			this->table24->Name = L"table24";
			this->table24->RowCount = 2;
			this->table24->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table24->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table24->Size = System::Drawing::Size(131, 78);
			this->table24->TabIndex = 18;
			// 
			// taskBox24
			// 
			this->taskBox24->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox24->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox24->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox24->ForeColor = System::Drawing::Color::White;
			this->taskBox24->Location = System::Drawing::Point(3, 23);
			this->taskBox24->Multiline = true;
			this->taskBox24->Name = L"taskBox24";
			this->taskBox24->ReadOnly = true;
			this->taskBox24->Size = System::Drawing::Size(125, 52);
			this->taskBox24->TabIndex = 1;
			this->taskBox24->TabStop = false;
			// 
			// dateBox24
			// 
			this->dateBox24->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox24->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox24->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox24->ForeColor = System::Drawing::Color::White;
			this->dateBox24->Location = System::Drawing::Point(3, 3);
			this->dateBox24->Name = L"dateBox24";
			this->dateBox24->ReadOnly = true;
			this->dateBox24->Size = System::Drawing::Size(125, 14);
			this->dateBox24->TabIndex = 0;
			this->dateBox24->TabStop = false;
			// 
			// table23
			// 
			this->table23->ColumnCount = 1;
			this->table23->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table23->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table23->Controls->Add(this->taskBox23, 0, 1);
			this->table23->Controls->Add(this->dateBox23, 0, 0);
			this->table23->Location = System::Drawing::Point(283, 109);
			this->table23->Name = L"table23";
			this->table23->RowCount = 2;
			this->table23->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table23->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table23->Size = System::Drawing::Size(131, 78);
			this->table23->TabIndex = 17;
			// 
			// taskBox23
			// 
			this->taskBox23->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox23->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox23->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox23->ForeColor = System::Drawing::Color::White;
			this->taskBox23->Location = System::Drawing::Point(3, 23);
			this->taskBox23->Multiline = true;
			this->taskBox23->Name = L"taskBox23";
			this->taskBox23->ReadOnly = true;
			this->taskBox23->Size = System::Drawing::Size(125, 52);
			this->taskBox23->TabIndex = 1;
			this->taskBox23->TabStop = false;
			// 
			// dateBox23
			// 
			this->dateBox23->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox23->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox23->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox23->ForeColor = System::Drawing::Color::White;
			this->dateBox23->Location = System::Drawing::Point(3, 3);
			this->dateBox23->Name = L"dateBox23";
			this->dateBox23->ReadOnly = true;
			this->dateBox23->Size = System::Drawing::Size(125, 14);
			this->dateBox23->TabIndex = 0;
			this->dateBox23->TabStop = false;
			// 
			// table22
			// 
			this->table22->ColumnCount = 1;
			this->table22->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table22->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table22->Controls->Add(this->taskBox22, 0, 1);
			this->table22->Controls->Add(this->dateBox22, 0, 0);
			this->table22->Location = System::Drawing::Point(144, 109);
			this->table22->Name = L"table22";
			this->table22->RowCount = 2;
			this->table22->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table22->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table22->Size = System::Drawing::Size(131, 78);
			this->table22->TabIndex = 16;
			// 
			// taskBox22
			// 
			this->taskBox22->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox22->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox22->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox22->ForeColor = System::Drawing::Color::White;
			this->taskBox22->Location = System::Drawing::Point(3, 23);
			this->taskBox22->Multiline = true;
			this->taskBox22->Name = L"taskBox22";
			this->taskBox22->ReadOnly = true;
			this->taskBox22->Size = System::Drawing::Size(125, 52);
			this->taskBox22->TabIndex = 1;
			this->taskBox22->TabStop = false;
			// 
			// dateBox22
			// 
			this->dateBox22->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox22->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox22->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox22->ForeColor = System::Drawing::Color::White;
			this->dateBox22->Location = System::Drawing::Point(3, 3);
			this->dateBox22->Name = L"dateBox22";
			this->dateBox22->ReadOnly = true;
			this->dateBox22->Size = System::Drawing::Size(125, 14);
			this->dateBox22->TabIndex = 0;
			this->dateBox22->TabStop = false;
			// 
			// table21
			// 
			this->table21->ColumnCount = 1;
			this->table21->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table21->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table21->Controls->Add(this->taskBox21, 0, 1);
			this->table21->Controls->Add(this->dateBox21, 0, 0);
			this->table21->Location = System::Drawing::Point(5, 109);
			this->table21->Name = L"table21";
			this->table21->RowCount = 2;
			this->table21->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table21->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table21->Size = System::Drawing::Size(131, 78);
			this->table21->TabIndex = 15;
			// 
			// taskBox21
			// 
			this->taskBox21->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox21->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox21->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox21->ForeColor = System::Drawing::Color::White;
			this->taskBox21->Location = System::Drawing::Point(3, 23);
			this->taskBox21->Multiline = true;
			this->taskBox21->Name = L"taskBox21";
			this->taskBox21->ReadOnly = true;
			this->taskBox21->Size = System::Drawing::Size(125, 52);
			this->taskBox21->TabIndex = 1;
			this->taskBox21->TabStop = false;
			// 
			// dateBox21
			// 
			this->dateBox21->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox21->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox21->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox21->ForeColor = System::Drawing::Color::White;
			this->dateBox21->Location = System::Drawing::Point(3, 3);
			this->dateBox21->Name = L"dateBox21";
			this->dateBox21->ReadOnly = true;
			this->dateBox21->Size = System::Drawing::Size(125, 14);
			this->dateBox21->TabIndex = 0;
			this->dateBox21->TabStop = false;
			// 
			// table17
			// 
			this->table17->ColumnCount = 1;
			this->table17->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table17->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table17->Controls->Add(this->taskBox17, 0, 1);
			this->table17->Controls->Add(this->dateBox17, 0, 0);
			this->table17->Location = System::Drawing::Point(839, 28);
			this->table17->Name = L"table17";
			this->table17->RowCount = 2;
			this->table17->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 25)));
			this->table17->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 75)));
			this->table17->Size = System::Drawing::Size(136, 73);
			this->table17->TabIndex = 14;
			// 
			// taskBox17
			// 
			this->taskBox17->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox17->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox17->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox17->ForeColor = System::Drawing::Color::White;
			this->taskBox17->Location = System::Drawing::Point(3, 21);
			this->taskBox17->Multiline = true;
			this->taskBox17->Name = L"taskBox17";
			this->taskBox17->ReadOnly = true;
			this->taskBox17->Size = System::Drawing::Size(130, 49);
			this->taskBox17->TabIndex = 1;
			this->taskBox17->TabStop = false;
			// 
			// dateBox17
			// 
			this->dateBox17->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox17->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox17->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox17->ForeColor = System::Drawing::Color::White;
			this->dateBox17->Location = System::Drawing::Point(3, 3);
			this->dateBox17->Name = L"dateBox17";
			this->dateBox17->ReadOnly = true;
			this->dateBox17->Size = System::Drawing::Size(130, 14);
			this->dateBox17->TabIndex = 0;
			this->dateBox17->TabStop = false;
			// 
			// table16
			// 
			this->table16->ColumnCount = 1;
			this->table16->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table16->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table16->Controls->Add(this->taskBox16, 0, 1);
			this->table16->Controls->Add(this->dateBox16, 0, 0);
			this->table16->Location = System::Drawing::Point(700, 28);
			this->table16->Name = L"table16";
			this->table16->RowCount = 2;
			this->table16->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table16->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table16->Size = System::Drawing::Size(131, 73);
			this->table16->TabIndex = 13;
			// 
			// taskBox16
			// 
			this->taskBox16->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox16->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox16->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox16->ForeColor = System::Drawing::Color::White;
			this->taskBox16->Location = System::Drawing::Point(3, 22);
			this->taskBox16->Multiline = true;
			this->taskBox16->Name = L"taskBox16";
			this->taskBox16->ReadOnly = true;
			this->taskBox16->Size = System::Drawing::Size(125, 48);
			this->taskBox16->TabIndex = 1;
			this->taskBox16->TabStop = false;
			// 
			// dateBox16
			// 
			this->dateBox16->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox16->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox16->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox16->ForeColor = System::Drawing::Color::White;
			this->dateBox16->Location = System::Drawing::Point(3, 3);
			this->dateBox16->Name = L"dateBox16";
			this->dateBox16->ReadOnly = true;
			this->dateBox16->Size = System::Drawing::Size(125, 14);
			this->dateBox16->TabIndex = 0;
			this->dateBox16->TabStop = false;
			// 
			// table15
			// 
			this->table15->ColumnCount = 1;
			this->table15->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table15->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table15->Controls->Add(this->taskBox15, 0, 1);
			this->table15->Controls->Add(this->dateBox15, 0, 0);
			this->table15->Location = System::Drawing::Point(561, 28);
			this->table15->Name = L"table15";
			this->table15->RowCount = 2;
			this->table15->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table15->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table15->Size = System::Drawing::Size(131, 73);
			this->table15->TabIndex = 12;
			// 
			// taskBox15
			// 
			this->taskBox15->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox15->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox15->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox15->ForeColor = System::Drawing::Color::White;
			this->taskBox15->Location = System::Drawing::Point(3, 22);
			this->taskBox15->Multiline = true;
			this->taskBox15->Name = L"taskBox15";
			this->taskBox15->ReadOnly = true;
			this->taskBox15->Size = System::Drawing::Size(125, 48);
			this->taskBox15->TabIndex = 1;
			this->taskBox15->TabStop = false;
			// 
			// dateBox15
			// 
			this->dateBox15->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox15->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox15->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox15->ForeColor = System::Drawing::Color::White;
			this->dateBox15->Location = System::Drawing::Point(3, 3);
			this->dateBox15->Name = L"dateBox15";
			this->dateBox15->ReadOnly = true;
			this->dateBox15->Size = System::Drawing::Size(125, 14);
			this->dateBox15->TabIndex = 0;
			this->dateBox15->TabStop = false;
			// 
			// table14
			// 
			this->table14->ColumnCount = 1;
			this->table14->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table14->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table14->Controls->Add(this->taskBox14, 0, 1);
			this->table14->Controls->Add(this->dateBox14, 0, 0);
			this->table14->Location = System::Drawing::Point(422, 28);
			this->table14->Name = L"table14";
			this->table14->RowCount = 2;
			this->table14->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table14->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table14->Size = System::Drawing::Size(131, 73);
			this->table14->TabIndex = 11;
			// 
			// taskBox14
			// 
			this->taskBox14->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox14->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox14->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox14->ForeColor = System::Drawing::Color::White;
			this->taskBox14->Location = System::Drawing::Point(3, 22);
			this->taskBox14->Multiline = true;
			this->taskBox14->Name = L"taskBox14";
			this->taskBox14->ReadOnly = true;
			this->taskBox14->Size = System::Drawing::Size(125, 48);
			this->taskBox14->TabIndex = 1;
			this->taskBox14->TabStop = false;
			// 
			// dateBox14
			// 
			this->dateBox14->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox14->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox14->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox14->ForeColor = System::Drawing::Color::White;
			this->dateBox14->Location = System::Drawing::Point(3, 3);
			this->dateBox14->Name = L"dateBox14";
			this->dateBox14->ReadOnly = true;
			this->dateBox14->Size = System::Drawing::Size(125, 14);
			this->dateBox14->TabIndex = 0;
			this->dateBox14->TabStop = false;
			// 
			// table13
			// 
			this->table13->ColumnCount = 1;
			this->table13->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table13->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table13->Controls->Add(this->taskBox13, 0, 1);
			this->table13->Controls->Add(this->dateBox13, 0, 0);
			this->table13->Location = System::Drawing::Point(283, 28);
			this->table13->Name = L"table13";
			this->table13->RowCount = 2;
			this->table13->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table13->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table13->Size = System::Drawing::Size(131, 73);
			this->table13->TabIndex = 10;
			// 
			// taskBox13
			// 
			this->taskBox13->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox13->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox13->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox13->ForeColor = System::Drawing::Color::White;
			this->taskBox13->Location = System::Drawing::Point(3, 22);
			this->taskBox13->Multiline = true;
			this->taskBox13->Name = L"taskBox13";
			this->taskBox13->ReadOnly = true;
			this->taskBox13->Size = System::Drawing::Size(125, 48);
			this->taskBox13->TabIndex = 1;
			this->taskBox13->TabStop = false;
			// 
			// dateBox13
			// 
			this->dateBox13->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox13->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox13->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox13->ForeColor = System::Drawing::Color::White;
			this->dateBox13->Location = System::Drawing::Point(3, 3);
			this->dateBox13->Name = L"dateBox13";
			this->dateBox13->ReadOnly = true;
			this->dateBox13->Size = System::Drawing::Size(125, 14);
			this->dateBox13->TabIndex = 0;
			this->dateBox13->TabStop = false;
			// 
			// table12
			// 
			this->table12->ColumnCount = 1;
			this->table12->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table12->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table12->Controls->Add(this->taskBox12, 0, 1);
			this->table12->Controls->Add(this->dateBox12, 0, 0);
			this->table12->Location = System::Drawing::Point(144, 28);
			this->table12->Name = L"table12";
			this->table12->RowCount = 2;
			this->table12->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table12->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table12->Size = System::Drawing::Size(131, 73);
			this->table12->TabIndex = 9;
			// 
			// taskBox12
			// 
			this->taskBox12->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox12->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox12->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox12->ForeColor = System::Drawing::Color::White;
			this->taskBox12->Location = System::Drawing::Point(3, 22);
			this->taskBox12->Multiline = true;
			this->taskBox12->Name = L"taskBox12";
			this->taskBox12->ReadOnly = true;
			this->taskBox12->Size = System::Drawing::Size(125, 48);
			this->taskBox12->TabIndex = 1;
			this->taskBox12->TabStop = false;
			// 
			// dateBox12
			// 
			this->dateBox12->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox12->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox12->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox12->ForeColor = System::Drawing::Color::White;
			this->dateBox12->Location = System::Drawing::Point(3, 3);
			this->dateBox12->Name = L"dateBox12";
			this->dateBox12->ReadOnly = true;
			this->dateBox12->Size = System::Drawing::Size(125, 14);
			this->dateBox12->TabIndex = 0;
			this->dateBox12->TabStop = false;
			// 
			// dayTxtBlkSat
			// 
			this->dayTxtBlkSat->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dayTxtBlkSat->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dayTxtBlkSat->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10));
			this->dayTxtBlkSat->ForeColor = System::Drawing::Color::White;
			this->dayTxtBlkSat->Location = System::Drawing::Point(839, 5);
			this->dayTxtBlkSat->Name = L"dayTxtBlkSat";
			this->dayTxtBlkSat->ReadOnly = true;
			this->dayTxtBlkSat->Size = System::Drawing::Size(136, 16);
			this->dayTxtBlkSat->TabIndex = 6;
			this->dayTxtBlkSat->TabStop = false;
			this->dayTxtBlkSat->Text = L"Sat";
			this->dayTxtBlkSat->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
			// 
			// dayTxtBlkFri
			// 
			this->dayTxtBlkFri->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dayTxtBlkFri->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dayTxtBlkFri->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10));
			this->dayTxtBlkFri->ForeColor = System::Drawing::Color::White;
			this->dayTxtBlkFri->Location = System::Drawing::Point(700, 5);
			this->dayTxtBlkFri->Name = L"dayTxtBlkFri";
			this->dayTxtBlkFri->ReadOnly = true;
			this->dayTxtBlkFri->Size = System::Drawing::Size(131, 16);
			this->dayTxtBlkFri->TabIndex = 5;
			this->dayTxtBlkFri->TabStop = false;
			this->dayTxtBlkFri->Text = L"Fri";
			this->dayTxtBlkFri->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
			this->dayTxtBlkFri->TextChanged += gcnew System::EventHandler(this, &MonthForm::textBox5_TextChanged);
			// 
			// dayTxtBlkThur
			// 
			this->dayTxtBlkThur->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dayTxtBlkThur->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dayTxtBlkThur->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10));
			this->dayTxtBlkThur->ForeColor = System::Drawing::Color::White;
			this->dayTxtBlkThur->Location = System::Drawing::Point(561, 5);
			this->dayTxtBlkThur->Name = L"dayTxtBlkThur";
			this->dayTxtBlkThur->ReadOnly = true;
			this->dayTxtBlkThur->Size = System::Drawing::Size(131, 16);
			this->dayTxtBlkThur->TabIndex = 4;
			this->dayTxtBlkThur->TabStop = false;
			this->dayTxtBlkThur->Text = L"Thu";
			this->dayTxtBlkThur->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
			// 
			// dayTxtBlkTue
			// 
			this->dayTxtBlkTue->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dayTxtBlkTue->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dayTxtBlkTue->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10));
			this->dayTxtBlkTue->ForeColor = System::Drawing::Color::White;
			this->dayTxtBlkTue->Location = System::Drawing::Point(283, 5);
			this->dayTxtBlkTue->Name = L"dayTxtBlkTue";
			this->dayTxtBlkTue->ReadOnly = true;
			this->dayTxtBlkTue->Size = System::Drawing::Size(131, 16);
			this->dayTxtBlkTue->TabIndex = 2;
			this->dayTxtBlkTue->TabStop = false;
			this->dayTxtBlkTue->Text = L"Tue";
			this->dayTxtBlkTue->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
			// 
			// dayTxtBlkSun
			// 
			this->dayTxtBlkSun->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dayTxtBlkSun->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dayTxtBlkSun->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10));
			this->dayTxtBlkSun->ForeColor = System::Drawing::Color::White;
			this->dayTxtBlkSun->Location = System::Drawing::Point(5, 5);
			this->dayTxtBlkSun->Name = L"dayTxtBlkSun";
			this->dayTxtBlkSun->ReadOnly = true;
			this->dayTxtBlkSun->Size = System::Drawing::Size(131, 16);
			this->dayTxtBlkSun->TabIndex = 0;
			this->dayTxtBlkSun->TabStop = false;
			this->dayTxtBlkSun->Text = L"Sun";
			this->dayTxtBlkSun->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
			this->dayTxtBlkSun->TextChanged += gcnew System::EventHandler(this, &MonthForm::textBox1_TextChanged);
			// 
			// dayTxtBlkMon
			// 
			this->dayTxtBlkMon->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dayTxtBlkMon->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dayTxtBlkMon->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10));
			this->dayTxtBlkMon->ForeColor = System::Drawing::Color::White;
			this->dayTxtBlkMon->Location = System::Drawing::Point(144, 5);
			this->dayTxtBlkMon->Name = L"dayTxtBlkMon";
			this->dayTxtBlkMon->ReadOnly = true;
			this->dayTxtBlkMon->Size = System::Drawing::Size(131, 16);
			this->dayTxtBlkMon->TabIndex = 1;
			this->dayTxtBlkMon->TabStop = false;
			this->dayTxtBlkMon->Text = L"Mon";
			this->dayTxtBlkMon->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
			// 
			// table11
			// 
			this->table11->ColumnCount = 1;
			this->table11->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 35.52632F)));
			this->table11->ColumnStyles->Add((gcnew System::Windows::Forms::ColumnStyle(System::Windows::Forms::SizeType::Percent, 64.47369F)));
			this->table11->Controls->Add(this->taskBox11, 0, 1);
			this->table11->Controls->Add(this->dateBox11, 0, 0);
			this->table11->Location = System::Drawing::Point(5, 28);
			this->table11->Name = L"table11";
			this->table11->RowCount = 2;
			this->table11->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 26.0274F)));
			this->table11->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Percent, 73.9726F)));
			this->table11->RowStyles->Add((gcnew System::Windows::Forms::RowStyle(System::Windows::Forms::SizeType::Absolute, 20)));
			this->table11->Size = System::Drawing::Size(131, 73);
			this->table11->TabIndex = 8;
			// 
			// taskBox11
			// 
			this->taskBox11->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->taskBox11->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->taskBox11->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->taskBox11->ForeColor = System::Drawing::Color::White;
			this->taskBox11->Location = System::Drawing::Point(3, 22);
			this->taskBox11->Multiline = true;
			this->taskBox11->Name = L"taskBox11";
			this->taskBox11->ReadOnly = true;
			this->taskBox11->Size = System::Drawing::Size(125, 48);
			this->taskBox11->TabIndex = 1;
			this->taskBox11->TabStop = false;
			// 
			// dateBox11
			// 
			this->dateBox11->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dateBox11->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dateBox11->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->dateBox11->ForeColor = System::Drawing::Color::White;
			this->dateBox11->Location = System::Drawing::Point(3, 3);
			this->dateBox11->Name = L"dateBox11";
			this->dateBox11->ReadOnly = true;
			this->dateBox11->Size = System::Drawing::Size(125, 14);
			this->dateBox11->TabIndex = 0;
			this->dateBox11->TabStop = false;
			// 
			// dayTxtBlkWed
			// 
			this->dayTxtBlkWed->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->dayTxtBlkWed->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->dayTxtBlkWed->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10));
			this->dayTxtBlkWed->ForeColor = System::Drawing::Color::White;
			this->dayTxtBlkWed->Location = System::Drawing::Point(422, 5);
			this->dayTxtBlkWed->Name = L"dayTxtBlkWed";
			this->dayTxtBlkWed->ReadOnly = true;
			this->dayTxtBlkWed->Size = System::Drawing::Size(131, 16);
			this->dayTxtBlkWed->TabIndex = 3;
			this->dayTxtBlkWed->TabStop = false;
			this->dayTxtBlkWed->Text = L"Wed";
			this->dayTxtBlkWed->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
			// 
			// userInputBox
			// 
			this->userInputBox->AutoCompleteCustomSource->AddRange(gcnew cli::array< System::String^  >(7) {
				L"add", L"edit", L"delete",
					L"show", L"redo", L"undo", L"search"
			});
			this->userInputBox->AutoCompleteMode = System::Windows::Forms::AutoCompleteMode::Append;
			this->userInputBox->BackColor = System::Drawing::Color::White;
			this->userInputBox->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12));
			this->userInputBox->Location = System::Drawing::Point(291, 596);
			this->userInputBox->Name = L"userInputBox";
			this->userInputBox->ScrollBars = System::Windows::Forms::ScrollBars::Vertical;
			this->userInputBox->Size = System::Drawing::Size(980, 26);
			this->userInputBox->TabIndex = 1;
			this->userInputBox->TextChanged += gcnew System::EventHandler(this, &MonthForm::userInputBox_TextChanged);
			this->userInputBox->KeyDown += gcnew System::Windows::Forms::KeyEventHandler(this, &MonthForm::ctrlHold);
			this->userInputBox->KeyUp += gcnew System::Windows::Forms::KeyEventHandler(this, &MonthForm::userEnter);
			// 
			// monthFormTitle
			// 
			this->monthFormTitle->BackColor = System::Drawing::Color::Black;
			this->monthFormTitle->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->monthFormTitle->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14));
			this->monthFormTitle->ForeColor = System::Drawing::Color::White;
			this->monthFormTitle->Location = System::Drawing::Point(646, 3);
			this->monthFormTitle->Name = L"monthFormTitle";
			this->monthFormTitle->ReadOnly = true;
			this->monthFormTitle->ScrollBars = System::Windows::Forms::ScrollBars::Both;
			this->monthFormTitle->Size = System::Drawing::Size(255, 22);
			this->monthFormTitle->TabIndex = 2;
			this->monthFormTitle->TabStop = false;
			this->monthFormTitle->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
			// 
			// sideBar
			// 
			this->sideBar->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->sideBar->ForeColor = System::Drawing::Color::White;
			this->sideBar->Location = System::Drawing::Point(12, 31);
			this->sideBar->Multiline = true;
			this->sideBar->Name = L"sideBar";
			this->sideBar->ReadOnly = true;
			this->sideBar->ScrollBars = System::Windows::Forms::ScrollBars::Vertical;
			this->sideBar->Size = System::Drawing::Size(273, 591);
			this->sideBar->TabIndex = 3;
			// 
			// sideBarTitle
			// 
			this->sideBarTitle->BackColor = System::Drawing::Color::Black;
			this->sideBarTitle->BorderStyle = System::Windows::Forms::BorderStyle::None;
			this->sideBarTitle->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14));
			this->sideBarTitle->ForeColor = System::Drawing::Color::White;
			this->sideBarTitle->Location = System::Drawing::Point(12, 3);
			this->sideBarTitle->Name = L"sideBarTitle";
			this->sideBarTitle->ReadOnly = true;
			this->sideBarTitle->Size = System::Drawing::Size(273, 22);
			this->sideBarTitle->TabIndex = 4;
			this->sideBarTitle->TabStop = false;
			this->sideBarTitle->Text = L"Todo Tasks";
			this->sideBarTitle->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
			// 
			// feedBackBox
			// 
			this->feedBackBox->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->feedBackBox->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12));
			this->feedBackBox->ForeColor = System::Drawing::Color::White;
			this->feedBackBox->Location = System::Drawing::Point(291, 550);
			this->feedBackBox->Multiline = true;
			this->feedBackBox->Name = L"feedBackBox";
			this->feedBackBox->ReadOnly = true;
			this->feedBackBox->Size = System::Drawing::Size(980, 40);
			this->feedBackBox->TabIndex = 5;
			this->feedBackBox->TabStop = false;
			// 
			// resetButton
			// 
			this->resetButton->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(27)), static_cast<System::Int32>(static_cast<System::Byte>(24)),
				static_cast<System::Int32>(static_cast<System::Byte>(27)));
			this->resetButton->ForeColor = System::Drawing::Color::White;
			this->resetButton->Location = System::Drawing::Point(1239, 6);
			this->resetButton->Name = L"resetButton";
			this->resetButton->Size = System::Drawing::Size(32, 23);
			this->resetButton->TabIndex = 6;
			this->resetButton->TabStop = false;
			this->resetButton->Text = L"DV";
			this->resetButton->UseVisualStyleBackColor = false;
			this->resetButton->Click += gcnew System::EventHandler(this, &MonthForm::defaultView);
			// 
			// MonthForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->AutoSizeMode = System::Windows::Forms::AutoSizeMode::GrowAndShrink;
			this->BackColor = System::Drawing::Color::Black;
			this->ClientSize = System::Drawing::Size(1283, 634);
			this->Controls->Add(this->resetButton);
			this->Controls->Add(this->feedBackBox);
			this->Controls->Add(this->sideBarTitle);
			this->Controls->Add(this->sideBar);
			this->Controls->Add(this->monthFormTitle);
			this->Controls->Add(this->userInputBox);
			this->Controls->Add(this->monthPanel);
			this->FormBorderStyle = System::Windows::Forms::FormBorderStyle::Fixed3D;
			this->MaximizeBox = false;
			this->Name = L"MonthForm";
			this->Text = L"ComCal";
			this->monthPanel->ResumeLayout(false);
			this->monthPanel->PerformLayout();
			this->table63->ResumeLayout(false);
			this->table63->PerformLayout();
			this->table62->ResumeLayout(false);
			this->table62->PerformLayout();
			this->table61->ResumeLayout(false);
			this->table61->PerformLayout();
			this->table64->ResumeLayout(false);
			this->table64->PerformLayout();
			this->table67->ResumeLayout(false);
			this->table67->PerformLayout();
			this->table66->ResumeLayout(false);
			this->table66->PerformLayout();
			this->table65->ResumeLayout(false);
			this->table65->PerformLayout();
			this->table51->ResumeLayout(false);
			this->table51->PerformLayout();
			this->table57->ResumeLayout(false);
			this->table57->PerformLayout();
			this->table56->ResumeLayout(false);
			this->table56->PerformLayout();
			this->table55->ResumeLayout(false);
			this->table55->PerformLayout();
			this->table54->ResumeLayout(false);
			this->table54->PerformLayout();
			this->table53->ResumeLayout(false);
			this->table53->PerformLayout();
			this->table52->ResumeLayout(false);
			this->table52->PerformLayout();
			this->table47->ResumeLayout(false);
			this->table47->PerformLayout();
			this->table46->ResumeLayout(false);
			this->table46->PerformLayout();
			this->tableLayoutPanel26->ResumeLayout(false);
			this->tableLayoutPanel26->PerformLayout();
			this->table44->ResumeLayout(false);
			this->table44->PerformLayout();
			this->table43->ResumeLayout(false);
			this->table43->PerformLayout();
			this->table42->ResumeLayout(false);
			this->table42->PerformLayout();
			this->tableLayoutPanel22->ResumeLayout(false);
			this->tableLayoutPanel22->PerformLayout();
			this->table37->ResumeLayout(false);
			this->table37->PerformLayout();
			this->table36->ResumeLayout(false);
			this->table36->PerformLayout();
			this->table35->ResumeLayout(false);
			this->table35->PerformLayout();
			this->table34->ResumeLayout(false);
			this->table34->PerformLayout();
			this->table33->ResumeLayout(false);
			this->table33->PerformLayout();
			this->table32->ResumeLayout(false);
			this->table32->PerformLayout();
			this->table31->ResumeLayout(false);
			this->table31->PerformLayout();
			this->table27->ResumeLayout(false);
			this->table27->PerformLayout();
			this->table26->ResumeLayout(false);
			this->table26->PerformLayout();
			this->table25->ResumeLayout(false);
			this->table25->PerformLayout();
			this->table24->ResumeLayout(false);
			this->table24->PerformLayout();
			this->table23->ResumeLayout(false);
			this->table23->PerformLayout();
			this->table22->ResumeLayout(false);
			this->table22->PerformLayout();
			this->table21->ResumeLayout(false);
			this->table21->PerformLayout();
			this->table17->ResumeLayout(false);
			this->table17->PerformLayout();
			this->table16->ResumeLayout(false);
			this->table16->PerformLayout();
			this->table15->ResumeLayout(false);
			this->table15->PerformLayout();
			this->table14->ResumeLayout(false);
			this->table14->PerformLayout();
			this->table13->ResumeLayout(false);
			this->table13->PerformLayout();
			this->table12->ResumeLayout(false);
			this->table12->PerformLayout();
			this->table11->ResumeLayout(false);
			this->table11->PerformLayout();
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion  

	private: System::Void textBox1_TextChanged(System::Object^  sender, System::EventArgs^  e) {}
	private: System::Void textBox5_TextChanged(System::Object^  sender, System::EventArgs^  e) {}
	private: System::Void userInputBox_TextChanged(System::Object^  sender, System::EventArgs^  e) {}
	private: System::Void monthPanel_Paint(System::Object^  sender, System::Windows::Forms::PaintEventArgs^  e) {}


	private: System::Void userEnter(System::Object^  sender, System::Windows::Forms::KeyEventArgs^  e);
	private: System::Void ctrlHold(System::Object^  sender, System::Windows::Forms::KeyEventArgs^  e);
	private: System::Void defaultView(System::Object^  sender, System::EventArgs^  e);

}; //end MonthForm class
} //end of ComCal_v01 namespace
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\MonthForm.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Show.cpp
	 */

// Show.cpp
// Implementation of functions in the Show class

#include "Show.h"
#include "TextStorage.h"
#include "ComCalManager.h"
#include "timeDateInfo.h"
#include "keywords.h"
#include "typeConversions.h"
#include "Date.h"

#include <algorithm>
#include <ctype.h>
#include <time.h>

Show::Show() : Command() {
}

Show::~Show() {
}

std::string Show::execute(std::string argument) {
	std::string feedBack;
	std::string sideBarTitle;
	int count;
	int code = ALL_CODE;

	if (argument.size() <= 0) { // Default current month
		int year = timeDateInfo::setStructTm()->tm_year + 1900;
		int month = timeDateInfo::setStructTm()->tm_mon + 1;

		count = TextStorage::getInstance()->displayMonthTasks(ALL_CODE, year, month);
		ComCalManager::getInstance()->setSideBarTitle(timeDateInfo::getMonthStr(month - 1) + " " + typeConversions::intToString(year));
		return prepShowFeedback(CURRENT_MONTH_TASKS, count);
	}

	argument = typeConversions::toLowerCase(argument);

	int numOfWhiteSpace = Show::countWhiteSpace(argument);
	
	if (numOfWhiteSpace >= 3) {
		return INVALID_SHOW_INPUT;
	}

	if (numOfWhiteSpace == 2) {
		std::size_t firstSpace = argument.find_first_of(" ", 0);
		std::size_t secSpace = argument.find_first_of(" ", firstSpace+1);
		std::string firstArg = argument.substr(0, firstSpace);
		std::string secArg = argument.substr(firstSpace + 1, secSpace-firstSpace-1);
		std::string thiArg = argument.substr(secSpace + 1, argument.size());

		
		//start of show month year todo/done
		if (isTodoOrDone(firstArg, secArg, thiArg) && isArgYear(firstArg, secArg, thiArg) && isValidMonth(firstArg, secArg, thiArg)) {
			if (getMonthInput(secArg) != -1) {
				std::swap(firstArg, secArg);
			}
			else {
				if (getMonthInput(thiArg) != -1){
					std::swap(firstArg, thiArg);
				}
			}

			if (isTodoOrDone(secArg)) {
				std::swap(secArg, thiArg);
			}

			code = getCode(thiArg);
			int month = getMonthInput(firstArg);

			if (month == -1) {
				return INVALID_MONTH_INPUT;
			}

			return showMonthYear(code, month, firstArg, secArg);

		}//end show month year todo/done

		//start of show week date todo/done
		if (isWeek(firstArg, secArg, thiArg) && isTodoOrDone(firstArg,secArg,thiArg)) {
			if (secArg == WEEK) {
				std::swap(firstArg, secArg);
			}
			else {
				if (thiArg == WEEK){
					std::swap(firstArg, thiArg);
				}
			}

			if (isTodoOrDone(secArg)) {
				std::swap(secArg, thiArg);
			}

			Date date;
			if (date.setDate(secArg)) {
				return showWeekDate(getCode(thiArg), date);
			}
		} //end of show wek date todo/done

		//TODO: More show stuff
		// Hamzah, help me ensure that the message that returns to feedback bar includes the number of tasks shown. Thanks!
		return INVALID_SHOW_INPUT;
	}
	else {
		if (numOfWhiteSpace == 1) {

			std::size_t space = argument.find_first_of(" ", 0);
			std::string firstArg = argument.substr(0, space);
			std::string secArg = argument.substr(space + 1, argument.size());

			//1) Method to display month with specified year eg. May 2016
				//condition to check if user specified a month with a year
			//2)method handles todo or done with months in the current year
				if (getMonthInput(firstArg) != -1 || getMonthInput(secArg) != -1) {

					if (firstArg == INPUT_TODO || secArg == INPUT_TODO || firstArg == INPUT_DONE || secArg == INPUT_DONE) {

						if (firstArg == INPUT_TODO || firstArg == INPUT_DONE) {
							std::swap(firstArg, secArg);
						}

						code = ALL_CODE; // initialised to ALL_CODE in case of errors in the next few lines

						code = getCode(secArg);

						int month = getMonthInput(firstArg);
						if (month == -1) {
							return INVALID_MONTH_INPUT;
						}

						struct tm* date = timeDateInfo::setStructTm(month);
						int year = date->tm_year + 1900;

						count = TextStorage::getInstance()->displayMonthTasks(code, year, month + 1);
						sideBarTitle = timeDateInfo::getMonthStr(month) + " " + typeConversions::intToString(year) + " " + secArg + " tasks\n";
						ComCalManager::getInstance()->setSideBarTitle(sideBarTitle);

						return prepShowFeedback(sideBarTitle, count);

					}//end of todo/done month (current year)
					else {//following method is for month year

						if (timeDateInfo::isStringANum(firstArg)) {
							std::swap(firstArg, secArg);
						}
						int month = getMonthInput(firstArg);

						if (month == -1) {
							return INVALID_MONTH_INPUT;
						}

						return showMonthYear(ALL_CODE, month, firstArg, secArg);
					}//end of month and year method

				}//end of month and year || month todo/done condition


			//1)Method to display all the tasks in a week with specific date in the week
			//2)Method to display todo/done tasks in the current week
			if (((firstArg == WEEK) || (secArg == WEEK))) {

				if (firstArg != DATE_NEXT && secArg != DATE_NEXT) {

					if (secArg == WEEK) {
						std::swap(firstArg, secArg);
					}

					Date tempDate;
					if (tempDate.setDate(secArg)) { //method for show week date
						count = TextStorage::getInstance()->displayWeekTasks(ALL_CODE, getDatesInWeek(tempDate));
						sideBarTitle = tempDate.toGUIString() + " " + WEEK + TASKS;
						ComCalManager::getInstance()->setSideBarTitle(sideBarTitle);

						return prepShowFeedback(sideBarTitle, count);
					}
					else{ //method for show week todo/done
						if (secArg == INPUT_TODO || secArg == INPUT_DONE) {
							if (secArg == INPUT_TODO) {
								code = TODO_CODE;
								sideBarTitle = THIS_WEEK_TODO_TASK_TITLE;
								feedBack = THIS_WEEK_TODO_TASKS_FEEDBACK;
							}
							else {
								code = DONE_CODE;
								sideBarTitle = THIS_WEEK_DONE_TASK_TITLE;
								feedBack = THIS_WEEK_DONE_TASKS_FEEDBACK;
							}

							count = TextStorage::getInstance()->displayWeekTasks(code, getDatesInWeek());
							ComCalManager::getInstance()->setSideBarTitle(sideBarTitle);

							return prepShowFeedback(feedBack, count);
						}
						else{
							return INVALID_WEEK_INPUT;
						}
					}
				}

			}//end of all tasks within 1) specific date in week || 2)week todo/done

			//method to show todo tasks of the user specified date
			if ((firstArg == INPUT_TODO) || (secArg == INPUT_TODO)) {

				if (secArg == INPUT_TODO) {
					std::swap(firstArg, secArg);
				}

				Date * tempDate = new Date();
				if (tempDate->setDate(firstArg)) {
					count = TextStorage::getInstance()->displayTodoTasks(*tempDate);
					sideBarTitle = tempDate->toGUIString() + DATED_TODO_TASKS;
					ComCalManager::getInstance()->setSideBarTitle(sideBarTitle);

					return prepShowFeedback(sideBarTitle, count);
				}
				else {
					return INVALID_DATE_INPUT;
				}

				delete tempDate;
			}//end of todo tasks within specified date

			//method to show done tasks of the user specified date
			if ((firstArg == INPUT_DONE) || (secArg == INPUT_DONE)) {

				if (secArg == INPUT_DONE) {
					std::swap(firstArg, secArg);
				}
				Date tempDate;
				if (tempDate.setDate(firstArg)) {
					count = TextStorage::getInstance()->displayDoneTasks(tempDate);
					sideBarTitle = tempDate.toGUIString() + " " + INPUT_DONE + " tasks\n";
					ComCalManager::getInstance()->setSideBarTitle(sideBarTitle);

					return prepShowFeedback(sideBarTitle, count);
				}
				else {
					return INVALID_DATE_INPUT;
				}
			}//end of show done tasks within specified date

			//method to show todo/done floating tasks
			if (firstArg == FLOATING_TASKS || secArg == FLOATING_TASKS) {

				if (secArg == FLOATING_TASKS) {
					std::swap(firstArg, secArg);
				}

				bool isDone;
				if (secArg == INPUT_DONE) {
					isDone = true;
				}
				else {
					if (secArg == INPUT_TODO) {
						isDone = false;
					}
					else {
						return TODO_DONE_INPUT_ERROR;
					}
				}

				count = TextStorage::getInstance()->displayFloatingTasks(isDone);

				if (isDone){
					ComCalManager::getInstance()->setSideBarTitle(ALL_DONE_FLOATING_TASKS_TITLE);
				}
				else {
					ComCalManager::getInstance()->setSideBarTitle(ALL_TODO_FLOATING_TASKS_TITLE);
				}


				if (count == 0) {
					return ZERO_SHOW_RESULTS;
				}
				else {
					if (isDone){
						return prepShowFeedback(ALL_DONE_FLOATING_TASKS_FEEDBACK, count);
					}
					else {
						return prepShowFeedback(ALL_TODO_FLOATING_TASKS_FEEDBACK, count);
					}
				}

			}//end of todo/done floating tasks

			//method to show next week or next month todo&done tasks
			if ((firstArg == DATE_NEXT || secArg == DATE_NEXT)) {
				if (firstArg == DATE_MONTH || secArg == DATE_MONTH || secArg == DATE_WEEK || firstArg == DATE_WEEK) {

					int day = timeDateInfo::setStructTm()->tm_mday;
					int month = timeDateInfo::setStructTm()->tm_mon + 1;
					int year = timeDateInfo::setStructTm()->tm_year + 1900;
					int wday = timeDateInfo::setStructTm()->tm_wday;

					if (secArg == DATE_NEXT) {
						std::swap(secArg, firstArg);
					}

					//start of 'next month' method
					if (secArg == DATE_MONTH) {
						if (month == 12) {
							month = 1;
							year++;
						}
						else {
							month++;
						}

						count = TextStorage::getInstance()->displayMonthTasks(ALL_CODE, year, month);
						ComCalManager::getInstance()->setSideBarTitle(NEXT_MONTH_TITLE);
						timeDateInfo::setStructTm(year, month-1);

						return prepShowFeedback(NEXT_MONTH_TASKS_FEEDBACK, count);					
					}//end of next month method


					//start of show week of with a specific date inside
					if (secArg == DATE_WEEK) {
						Date startOfNextWeek = getNextWeekDate(year, month, day, wday);
						std::vector<Date> datesInWeek = getDatesInWeek(startOfNextWeek);

						count = TextStorage::getInstance()->displayWeekTasks(ALL_CODE, datesInWeek);
						ComCalManager::getInstance()->setSideBarTitle(NEXT_WEEK_TITLE);

						return prepShowFeedback(NEXT_WEEK_TASKS_FEEDBACK, count);
					}//end of show week with specified date

				}
				else {
					return INVALID_NEXT_INPUT;
				} 
			}//end of next week or next month method

			//start of deadlined task with specified date (default show all)
			if (firstArg == DEADLINED_TASK || secArg == DEADLINED_TASK) {

				if (secArg == DEADLINED_TASK) {
					std::swap(firstArg, secArg);
				}

				Date * tempDate = new Date();
				if (tempDate->setDate(secArg)) {
					count = TextStorage::getInstance()->displayDeadlinedTasks(ALL_CODE,*tempDate);
					sideBarTitle = tempDate->toGUIString() + ALL_TASKS_WITH_DEADLINE_TITLE;
					ComCalManager::getInstance()->setSideBarTitle(sideBarTitle);

					return prepShowFeedback(sideBarTitle, count);
				}
				else {
					return INVALID_DATE_INPUT;
				}
				delete tempDate;
			}//end of deadlined task with specified date

			//start of partial with specified date
			if (firstArg == INPUT_PARTIAL || secArg == INPUT_PARTIAL) {
				if (secArg == INPUT_PARTIAL) {
					std::swap(firstArg, secArg);
				}

				Date * tempDate = new Date();
				if (tempDate->setDate(secArg)) {
					count = TextStorage::getInstance()->displayPartialTask(ALL_CODE, *tempDate);
					sideBarTitle = tempDate->toGUIString() + " " + ALL_PARTIAL_TASKS_TITLE;
					ComCalManager::getInstance()->setSideBarTitle(sideBarTitle);

					return prepShowFeedback(sideBarTitle, count);
				}
				else {
					return INVALID_DATE_INPUT;
				}

				delete tempDate;
			}//end of partial with specified date


			//start of timed with specified date
			if (firstArg == INPUT_TIMED || secArg == INPUT_TIMED) {
				if (secArg == INPUT_TIMED) {
					std::swap(firstArg, secArg);
				}

				Date * tempDate = new Date();
				if (tempDate->setDate(secArg)) {
					count = TextStorage::getInstance()->displayTimedTasks(ALL_CODE, *tempDate);
					sideBarTitle = tempDate->toGUIString() + " " + ALL_TIMED_TASKS_TITLE;
					ComCalManager::getInstance()->setSideBarTitle(sideBarTitle);

					return prepShowFeedback(sideBarTitle, count);
				}
				else {
					return INVALID_DATE_INPUT;
				}

				delete tempDate;
			}//end of timed with specified date

		}
		else { //argument now has only one word, numOfWhiteSpace == 0

			if (argument == INPUT_TODO) { // Display all tasks that are not done
				ComCalManager::getInstance()->setSideBarTitle(ALL_TODO_TITLE);
				count = TextStorage::getInstance()->displayTodoTasks();

				return prepShowFeedback(ALL_TODO_FEEDBACK, count);
			}

			if (argument == ALL_TASKS) {
				count = TextStorage::getInstance()->displayAllTasks();
				ComCalManager::getInstance()->setSideBarTitle(ALL_TASKS_TITLE);

				return prepShowFeedback(ALL_TASKS_FEEDBACK, count);
			}

			if (argument == INPUT_DONE) { // Display all tasks that are done
				count = TextStorage::getInstance()->displayDoneTasks();
				ComCalManager::getInstance()->setSideBarTitle(ALL_DONE_TITLE);

				return prepShowFeedback(ALL_DONE_FEEDBACK, count);
			}

			if (argument == DEADLINED_TASK) { 
				count = TextStorage::getInstance()->displayDeadlinedTasks();
				ComCalManager::getInstance()->setSideBarTitle(ALL_TASKS_WITH_DEADLINE_TITLE);

				return prepShowFeedback(ALL_DEADLINED_FEEDBACK, count);
			}

			if (argument == INPUT_TIMED) {
				count = TextStorage::getInstance()->displayTimedTasks();
				ComCalManager::getInstance()->setSideBarTitle(ALL_TIMED_TASKS_TITLE);

				return prepShowFeedback(ALL_TIMED_TASKS_FEEDBACK, count);
			}

			if (argument == FLOATING_TASKS) {
				count = TextStorage::getInstance()->displayFloatingTasks();
				ComCalManager::getInstance()->setSideBarTitle(ALL_FLOATING_TASKS_TITLE);

				return prepShowFeedback(ALL_FLOATING_TASKS_FEEDBACK, count);
			}

			if (argument == INPUT_PARTIAL) {
				count = TextStorage::getInstance()->displayPartialTask();
				ComCalManager::getInstance()->setSideBarTitle(ALL_PARTIAL_TASKS_TITLE);

				return prepShowFeedback(ALL_PARTIAL_TASKS_TITLE, count);
			}

			// User specifies "show 'month'" 
			int month = getMonthInput(argument);
			if (month != -1) {
				struct tm* date = timeDateInfo::setStructTm(month);
				int year = date->tm_year + 1900;

				count = TextStorage::getInstance()->displayMonthTasks(ALL_CODE, year, month + 1);
				ComCalManager::getInstance()->setSideBarTitle(argument + " tasks\n");

				return prepShowFeedback(timeDateInfo::getMonthStr(getMonthInput(argument)), count);
			}

			if (argument == WEEK) {
				std::vector<Date> weekDate = getDatesInWeek();

				count = TextStorage::getInstance()->displayWeekTasks(ALL_CODE, weekDate);
				ComCalManager::getInstance()->setSideBarTitle(THIS_WEEK_ALL_TASK);

				return prepShowFeedback(THIS_WEEK_TASKS_FEEDBACK, count);
			}

			//user specifies a date through the formats, dd/mm/yyyy || tomorrow,today,yesterday
			Date* showDate = new Date();
			if (showDate->setDate(argument)) {
				count = TextStorage::getInstance()->displayDatedTasks(ALL_CODE, *showDate);
				sideBarTitle = showDate->toGUIString();
				ComCalManager::getInstance()->setSideBarTitle(showDate->toString() + " tasks");

				return prepShowFeedback(sideBarTitle + " tasks", count);
			}

			delete showDate;
			showDate = nullptr;
		} //end of one worded arguments
	}


	return INVALID_SHOW_INPUT;
}

int Show::getMonthInput(std::string argument) {
	for (int i = 0; i < MONTHS_IN_YEAR; i++) {

		if (argument == timeDateInfo::getLowerMonthStr(i)) {
			return i;
		}

		if (argument == timeDateInfo::getShortLowerMonthStr(i)) {
			return i;
		}
	}

	return -1;
}

std::vector<Date> Show::getDatesInWeek() {
	std::vector<Date> weekDate;

	struct tm * timeDetails = timeDateInfo::setStructTm();
	weekDate = getWeeklyDates(timeDetails->tm_year, timeDetails->tm_mon, timeDetails->tm_mday, timeDetails->tm_wday);

	return weekDate;
}


std::vector<Date> Show::getDatesInWeek(Date specDate) {
	std::vector<Date> weekDate;
	int year = specDate.getYear() + 1900;
	int month = specDate.getMonth() - 1;
	int mday = specDate.getDay();

	tm * timeDetails = timeDateInfo::setStructTm(year, month, mday);
	mktime(timeDetails);
	int wday = timeDetails->tm_wday;
	
	weekDate = getWeeklyDates(year, month, mday, wday);

	return weekDate;
}

std::vector<Date> Show::getWeeklyDates(int year, int month, int mday, int wday) {
	std::vector<Date> weekDate;

	if (wday != 0) {
		if (wday >= mday) {

			if (mday == 0) {
				year--;
				month = 11;
			}
			else {
				month--;
			}

			wday -= mday;
			mday = timeDateInfo::getDaysInMonth(month, year) - wday;
		}
		else {
			mday -= wday;
		}
	}

	for (int i = 0; i < DAYS_IN_WEEK; i++) {
		int tempMonth = month + 1;
		weekDate.push_back(Date(mday, tempMonth, year, 0000));

		if (mday == timeDateInfo::getDaysInMonth(month, year) && (month != 11)) {
			month++;
			mday = 1;
		}
		else {
			if ((mday == timeDateInfo::getDaysInMonth(month, year)) && (month == 11)){
				year++;
				month = 0;
				mday = 1;
			}
			else {
				mday++;
			}
		}
	}

	return weekDate;
}

std::vector<Date> Show::getWeeklyDates(struct tm* timeDetails) {
	std::vector<Date> weekDate;
	int dayWeek = timeDetails->tm_wday;
	int dayMonth = timeDetails->tm_mday;
	int month = timeDetails->tm_mon;
	int year = timeDetails->tm_year;

	if (dayWeek != 0) {
		if (dayWeek >= dayMonth) {

			if (dayMonth == 0) {
				year--;
				month = 11;
			}
			else {
				month--;
			}

			dayWeek -= dayMonth;
			dayMonth = timeDateInfo::getDaysInMonth(month, year) - dayWeek;
		}
		else {
			dayMonth -= dayWeek;
		}
	}

	for (int i = 0; i < DAYS_IN_WEEK; i++) {

		int tempMonth = month + 1;
		weekDate.push_back(Date(dayMonth, tempMonth, year, 0000));

		if (dayMonth == timeDateInfo::getDaysInMonth(month, year) && (month != 11)) {
			month++;
			dayMonth = 1;
		}
		else {
			if ((dayMonth == timeDateInfo::getDaysInMonth(month, year)) && (month == 11)){
				year++;
				month = 0;
				dayMonth = 1;
			}
			else {
				dayMonth++;
			}
		}
	}

	return weekDate;
}

std::string Show::prepShowFeedback(std::string feedback, int count) {
	if (count == 0) {
		return ZERO_SHOW_RESULTS;
	}
	else {
		return feedback + " " + SHOW_COUNT_START + typeConversions::intToString(count) + SHOW_COUNT_END;
	}
}

Date Show::getNextWeekDate(int year, int month, int mday, int wday) {
	int numDaysMonth = timeDateInfo::getDaysInMonth(month - 1, year);

	mday += DAYS_IN_WEEK - wday;
	if (numDaysMonth < mday) {
		mday %= numDaysMonth;
		if (month == 12) {
			month = 1;
			year++;
		}
		else {
			month++;
		}
	}

	Date startWeek(mday, month, year, 0000);

	return startWeek;
}

int Show::countWhiteSpace(std::string argument) {
	int numOfWhiteSpace = 0;

	for (int k = 0; k < argument.size(); k++) {
		if (isspace(argument[k])) {
			numOfWhiteSpace++;
		}
	}

	return numOfWhiteSpace;
}

bool Show::isTodoOrDone(std::string firstArg, std::string secArg, std::string thiArg) {
	if (isTodoOrDone(firstArg) || isTodoOrDone(secArg) || isTodoOrDone(thiArg)) {
		return true;
	}
	else {
		return false;
	}
}

bool Show::isTodoOrDone(std::string arg) {
	if (arg == INPUT_TODO || arg == INPUT_DONE) {
		return true;
	}
	else {
		return false;
	}
}

bool Show::isArgYear(std::string firstArg, std::string secArg, std::string thiArg) {
	if (timeDateInfo::isStringANum(firstArg) || timeDateInfo::isStringANum(secArg) || timeDateInfo::isStringANum(thiArg)) {
		return true;
	}
	else {
		return false;
	}
}

bool Show::isValidMonth(std::string firstArg, std::string secArg, std::string thiArg) {
	if (getMonthInput(firstArg) != -1 || getMonthInput(secArg) != -1 || getMonthInput(thiArg) != -1) {
		return true;
	}
	else{
		return false;
	}
}

bool Show::isWeek(std::string firstArg, std::string secArg, std::string thiArg) {
	if (firstArg == WEEK || secArg == WEEK || thiArg == WEEK) {
		return true;
	}
	else{
		return false;
	}
}


int Show::getCode(std::string arg) {
	if (arg == INPUT_DONE) {
		return DONE_CODE;
	}
	else {
		if (arg == INPUT_TODO) {
			return TODO_CODE;
		}
		else {
			return ALL_CODE;
		}
	}
}

std::string Show::showMonthYear(int code, int month, std::string firstArg, std::string secArg) {

	if (timeDateInfo::isStringANum(secArg) && secArg.size() == 4) {
		int year = typeConversions::stringToInt(secArg);

		if (year < 1900){
			return INVALID_YEAR_ERROR;
		}
		else {
			int count = TextStorage::getInstance()->displayMonthTasks(code, year, month + 1);
			struct tm* date = timeDateInfo::setStructTm(year, month);
			std::string sideBarTitle = prepSideBarTitleShowMonth(code, month, year);
			ComCalManager::getInstance()->setSideBarTitle(sideBarTitle);

			return prepShowFeedback(firstArg + " " + secArg, count);
		}
	}
	else{
		return INVALID_YEAR_ERROR;
	}
}

std::string Show::prepSideBarTitleShowMonth(int code, int month, int year) {
	std::string sideBarTitle = timeDateInfo::getMonthStr(month) + " " + typeConversions::intToString(year);

	if (code == TODO_CODE) {
		sideBarTitle += " " + DATED_TODO_TASKS;
		return sideBarTitle;
	}
	else {
		if (code == DONE_CODE) {
			sideBarTitle += " " + DATED_DONE_TASKS;
			return sideBarTitle;
		}
		else {
			sideBarTitle += " " + TASKS;
			return sideBarTitle;
		}
	}

	return sideBarTitle;
}

std::string Show::showWeekDate(int code, Date date) {
	int count = TextStorage::getInstance()->displayWeekTasks(code, getDatesInWeek(date));
	std::string sideBarTitle  = prepSideBarTitleShowWeek(code, date);
	ComCalManager::getInstance()->setSideBarTitle(sideBarTitle);

	return prepShowFeedback(sideBarTitle, count);
}

std::string Show::prepSideBarTitleShowWeek(int code, Date date) {
	std::string sideBarTitle = date.toGUIString() + " " + WEEK;

	if (code == TODO_CODE) {
		sideBarTitle += " " + DATED_TODO_TASKS;
		return sideBarTitle;
	}
	else if (code == DONE_CODE) {
		sideBarTitle += " " + DATED_DONE_TASKS;
		return sideBarTitle;
	}
	else {
		sideBarTitle += " " + TASKS;
		return sideBarTitle;
	}

	return sideBarTitle;
}
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Show.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Show.h
	 */

// Show.h
// Subclass of Command; implements the show function

#pragma once

#include "Command.h"
#include "Date.h"
#include "TextStorage.h"
#include "ComCalManager.h"
#include "timeDateInfo.h"
#include "keywords.h"
#include "typeConversions.h"

class Show : public Command {
	
private:
	int getMonthInput(std::string argument);

	//2 overloaded functions of getDatesInWeek
	//Purpose: To return a vector of dates that corresponds to the week depending on which overload is used
	//Arguments: None
	//Returns: dates within the week of the current time
	std::vector<Date> getDatesInWeek();

	//Arguments: Date corresponding to the date specified by used
	//Returns:: Dates within the week that contains the argument
	std::vector<Date> getDatesInWeek(Date specDate);

	//Arguments: 1)time Details of the week
	std::vector<Date> getWeeklyDates(struct tm*);

	//Arguments: 1) int year - years after 1900, month, day of the month, day of the week
	std::vector<Date> getWeeklyDates(int year, int month, int mday, int wday);

	Date getNextWeekDate(int year, int month, int mday, int wday);

	std::string prepShowFeedback(std::string feedback,int count);
	std::string prepSideBarTitleShowMonth(int code, int month, int year);
	std::string prepSideBarTitleShowWeek(int code, Date date);

	
	bool isTodoOrDone(std::string arg);
	bool isTodoOrDone(std::string firstArg, std::string secArg, std::string thiArg);
	bool isWeek(std::string firstArg, std::string secArg, std::string thiArg);
	bool isArgYear(std::string firstArg, std::string secArg, std::string thiArg);
	bool isValidMonth(std::string firstArg, std::string secArg, std::string thiArg);

	int getCode(std::string arg);
	int countWhiteSpace(std::string argument);

	std::string showMonthYear(int code, int month, std::string firstArg, std::string secArg);
	std::string showWeekDate(int code, Date date);
	
public:
	Show();
	~Show();
	std::string execute(std::string argument);
};
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Show.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.cpp
	 */

bool Task::isBetween(const Date &date) {
	bool isBetween = false;

	if (_startDate->operator<=(date) && _endDate->operator>=(date)) {
		isBetween = true;
	}
	
	return isBetween;
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.cpp
	 */

// Gets the string of this task to be rendered in GUI elements, ie. sidebar, etc.
std::string Task::toGUIString() {
	std::string returnString = " task - " + DESCRIPTION + ": \"" + _description + "\"";

	if (hasStartDate()) {
		returnString += "; " + STARTDATETIME + ": " + _startDate->toString();
	}

	if (hasEndDate()) {
		returnString += "; " + ENDDATETIME + ": " + _endDate->toString();
	}

	if (_location != "") {
		returnString += "; " + LOCATION + ": \"" + _location + "\"";
	}

	return returnString;
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\Task.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\TextStorage.cpp
	 */

int TextStorage::displayTodoTasks() {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);
		if (!tempTask->getIsDone()) {
			tempTask->display();
			count++;
		}
		else {
			tempTask->hide();
		}
	}
	return count;
}

int TextStorage::displayTodoTasks(const Date &date) {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);

		if (tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED && tempTask->isBetween(date) && !tempTask->getIsDone()) {
			tempTask->display();
			count++;
		}
		else {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED && !tempTask->getIsDone()) {
				if (tempTask->getStartDate()->operator==(date)){
					tempTask->display();
					count++;
				}
				else {
					tempTask->hide();
				}
			}
			else {
				if (tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE && !tempTask->getIsDone()){
					if (tempTask->getEndDate()->operator==(date)) {
						tempTask->display();
						count++;
					}
					else {
						tempTask->hide();
					}
				}
				else{
					tempTask->hide();
				}

			}
		}
	}
	return count;
}

int TextStorage::displayDoneTasks() {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);
		if (tempTask->getIsDone()) {
			tempTask->display();
			count++;
		}
		else {
			tempTask->hide();
		}
	}

	return count;
}

int TextStorage::displayDoneTasks(const Date &date) {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);

		if (tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED && tempTask->getIsDone()) {
			if (tempTask->isBetween(date)) {
				tempTask->display();
				count++;
			}
			else {
				tempTask->hide();
			}
		}
		else {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED && tempTask->getIsDone()) {
				if (tempTask->getStartDate()->operator==(date)){
					tempTask->display();
					count++;
				}
				else {
					tempTask->hide();
				}
			}
			else {
				if (tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE && tempTask->getIsDone()){
					if (tempTask->getEndDate()->operator==(date)) {
						tempTask->display();
						count++;
					}
					else {
						tempTask->hide();
					}
				}
				else{
					tempTask->hide();
				}
			}
		}
	}
	return count;
}

int TextStorage::displayFloatingTasks() {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);

		if (tempTask->getTaskTypeCode() == TASKTYPECODE_FLOATING) {
			tempTask->display();
			count++;
		}
		else {
			tempTask->hide();
		}
	}

	return count;
}

int TextStorage::displayFloatingTasks(bool isDone) {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);

		if (tempTask->getIsDone() == isDone){
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_FLOATING) {
				tempTask->display();
				count++;
			}
			else {
				tempTask->hide();
			}
		}
	}

	return count;
}

int TextStorage::displayPartialTask() {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);

		if (tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED) {
			tempTask->display();
			count++;
		}
		else {
			tempTask->hide();
		}
	}

	return count;
}

int TextStorage::displayPartialTask(int code, const Date &date) {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);

		if (code == TODO_CODE) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED && tempTask->getStartDate()->operator==(date) && !tempTask->getIsDone()){
				tempTask->display();
				count++;
			}
			else {
				tempTask->hide();
			}
		}

		if (code == DONE_CODE) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED && tempTask->getStartDate()->operator==(date) && tempTask->getIsDone()){
				tempTask->display();
				count++;
			}
			else {
				tempTask->hide();
			}
		}

		if (code == ALL_CODE) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED && tempTask->getStartDate()->operator==(date)){
				tempTask->display();
				count++;
			}
			else {
				tempTask->hide();
			}
		}
	}

	return count;
}

int TextStorage::displayTimedTasks() {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);

		if (tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED) {
			tempTask->display();
			count++;
		}
		else {
			tempTask->hide();
		}
	}

	return count;
}

int TextStorage::displayTimedTasks(int code, const Date &date) {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);

		if (code == TODO_CODE) {
			if ((tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED) && tempTask->isBetween(date) && !tempTask->getIsDone()) {
				count++;
				tempTask->display();
			}
			else {
				tempTask->hide();
			}
		}

		if (code == DONE_CODE) {
			if ((tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED) && tempTask->isBetween(date) && tempTask->getIsDone()) {
				count++;
				tempTask->display();
			}
			else {
				tempTask->hide();
			}
		}

		if (code == ALL_CODE) {
			if ((tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED) && tempTask->isBetween(date)) {
				count++;
				tempTask->display();
			}
			else {
				tempTask->hide();
			}
		}

	}

	return count;
}

int TextStorage::displayMonthTasks(int code, int year, int month) {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;
	year -= 1900;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);

		if (code == TODOFILENAMEENTERED) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED && !tempTask->getIsDone()) {

				if ((tempTask->getStartDate()->getYear() <= year) && (tempTask->getEndDate()->getYear() >= year)) {

					if ((tempTask->getStartDate()->getYear() == year) && (tempTask->getStartDate()->getYear() == tempTask->getEndDate()->getYear()) && (tempTask->getStartDate()->getMonth() <= month) && (tempTask->getEndDate()->getMonth() >= month)) {
						tempTask->display();
						count++;
					}
					else {
						if (tempTask->getStartDate()->getYear() < year && tempTask->getEndDate()->getYear() > year) {
							tempTask->display();
							count++;
						}
						else {
							if (tempTask->getEndDate()->getYear() > year && tempTask->getStartDate()->getYear() == year && tempTask->getStartDate()->getMonth() <= month){
								tempTask->display();
								count++;
							}
							else {
								if (tempTask->getEndDate()->getYear() == year && month <= tempTask->getEndDate()->getMonth() && tempTask->getStartDate()->getYear() != tempTask->getEndDate()->getYear() && tempTask->getStartDate()->getYear() != tempTask->getEndDate()->getYear()) {
									tempTask->display();
									count++;
								}
								else {
									tempTask->hide();
								}
							}
						}
					}
				}
				else {
					tempTask->hide();
				}

			}//end tasktypecode_timed
			else {
				if (tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED && !tempTask->getIsDone()) {
					if ((tempTask->getStartDate()->getMonth() == month) && (tempTask->getStartDate()->getYear() == year)) {
						tempTask->display();
						count++;
					}
					else {
						tempTask->hide();
					}
				}
				else {
					if (tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE && !tempTask->getIsDone()) {
						if ((tempTask->getEndDate()->getMonth() == month) && (tempTask->getEndDate()->getYear() == year)) {
							tempTask->display();
							count++;
						}
						else {
							tempTask->hide();
						}
					}
					else {
						tempTask->hide();
					}
				}
			}
		}

		if (code == DONE_CODE) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED && tempTask->getIsDone()) {

				if ((tempTask->getStartDate()->getYear() <= year) && (tempTask->getEndDate()->getYear() >= year)) {

					if ((tempTask->getStartDate()->getYear() == year) && (tempTask->getStartDate()->getYear() == tempTask->getEndDate()->getYear()) && (tempTask->getStartDate()->getMonth() <= month) && (tempTask->getEndDate()->getMonth() >= month)) {
						tempTask->display();
						count++;
					}
					else {
						if (tempTask->getStartDate()->getYear() < year && tempTask->getEndDate()->getYear() > year) {
							tempTask->display();
							count++;
						}
						else {
							if (tempTask->getEndDate()->getYear() > year && tempTask->getStartDate()->getYear() == year && tempTask->getStartDate()->getMonth() <= month){
								tempTask->display();
								count++;
							}
							else {
								if (tempTask->getEndDate()->getYear() == year && month <= tempTask->getEndDate()->getMonth() && tempTask->getStartDate()->getYear() != tempTask->getEndDate()->getYear() && tempTask->getStartDate()->getYear() != tempTask->getEndDate()->getYear()) {
									tempTask->display();
									count++;
								}
								else {
									tempTask->hide();
								}
							}
						}
					}
				}
				else {
					tempTask->hide();
				}

			}//end tasktypecode_timed
			else {
				if (tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED && tempTask->getIsDone()) {
					if ((tempTask->getStartDate()->getMonth() == month) && (tempTask->getStartDate()->getYear() == year)) {
						tempTask->display();
						count++;
					}
					else {
						tempTask->hide();
					}
				}
				else {
					if (tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE && tempTask->getIsDone()) {
						if ((tempTask->getEndDate()->getMonth() == month) && (tempTask->getEndDate()->getYear() == year)) {
							tempTask->display();
							count++;
						}
						else {
							tempTask->hide();
						}
					}
					else {
						tempTask->hide();
					}
				}
			}
		}

		if (code == ALL_CODE) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED) {

				if ((tempTask->getStartDate()->getYear() <= year) && (tempTask->getEndDate()->getYear() >= year)) {

					if (tempTask->getStartDate()->getYear() == year && tempTask->getStartDate()->getYear() == tempTask->getEndDate()->getYear() && tempTask->getStartDate()->getMonth() <= month && tempTask->getEndDate()->getMonth() >= month) {
						tempTask->display();
						count++;
					}
					else {
						if (tempTask->getStartDate()->getYear() < year && tempTask->getEndDate()->getYear() > year) {
							tempTask->display();
							count++;
						}
						else {
							if (tempTask->getEndDate()->getYear() > year && tempTask->getStartDate()->getYear() == year && tempTask->getStartDate()->getMonth() <= month){
								tempTask->display();
								count++;
							}
							else {
								if (tempTask->getEndDate()->getYear() == year && month <= tempTask->getEndDate()->getMonth() && tempTask->getStartDate()->getYear() != tempTask->getEndDate()->getYear() && tempTask->getStartDate()->getYear() != tempTask->getEndDate()->getYear()) {
									tempTask->display();
									count++;
								}
								else {
									tempTask->hide();
								}
							}
						}
					}
				}
				else {
					tempTask->hide();
				}

			}//end tasktypecode_timed
			else {
				if (tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED) {
					if ((tempTask->getStartDate()->getMonth() == month) && (tempTask->getStartDate()->getYear() == year)) {
						tempTask->display();
						count++;
					}
					else {
						tempTask->hide();
					}
				}
				else {
					if (tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE) {
						if ((tempTask->getEndDate()->getMonth() == month) && (tempTask->getEndDate()->getYear() == year)) {
							tempTask->display();
							count++;
						}
						else {
							tempTask->hide();
						}
					}
					else {
						tempTask->hide();
					}
				}
			}
		}
	}
	return count;
} //end of displayMonth

int TextStorage::displayDatedTasks(int code, const Date &date) {
	int count = 0;
	unsigned int size = _todoTasks->size();
	Task* tempTask;

	for (unsigned int i = 0; i < size; i++) {
		tempTask = _todoTasks->at(i);

		if (code == TODO_CODE) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED && !tempTask->getIsDone()){
				if (tempTask->isBetween(date)){
					tempTask->display();
					count++;
				}
				else {
					tempTask->hide();
				}
			}
			else {
				if ((tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED) && (tempTask->getStartDate()->operator==(date)) && !tempTask->getIsDone()) {
					tempTask->display();
					count++;
				}
				else {
					if ((tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE) && (tempTask->getEndDate()->operator==(date)) && !tempTask->getIsDone()) {
						tempTask->display();
						count++;
					}
					else{
						tempTask->hide();
					}
				}
			}
		}

		if (code == DONE_CODE) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED && tempTask->getIsDone()){
				if (tempTask->isBetween(date)){
					tempTask->display();
					count++;
				}
				else {
					tempTask->hide();
				}
			}
			else {
				if ((tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED) && (tempTask->getStartDate()->operator==(date)) && tempTask->getIsDone()) {
					tempTask->display();
					count++;
				}
				else {
					if ((tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE) && (tempTask->getEndDate()->operator==(date)) && tempTask->getIsDone()) {
						tempTask->display();
						count++;
					}
					else{
						tempTask->hide();
					}
				}
			}
		}

		if (code == ALL_CODE) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED){
				if (tempTask->isBetween(date)){
					tempTask->display();
					count++;
				}
				else {
					tempTask->hide();
				}
			}
			else {
				if ((tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED) && (tempTask->getStartDate()->operator==(date))) {
					tempTask->display();
					count++;
				}
				else {
					if ((tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE) && (tempTask->getEndDate()->operator==(date))) {
						tempTask->display();
						count++;
					}
					else{
						tempTask->hide();
					}
				}
			}
		}
	}
	return count;
}

int TextStorage::displayWeekTasks(int code, std::vector<Date> weekDate) {
	int count = 0;
	unsigned int todoSize = _todoTasks->size();
	unsigned int weekSize = weekDate.size();
	Task * tempTask;

	//loops through todo task
	for (int i = 0; i < todoSize; i++) {

		tempTask = _todoTasks->at(i);
		//loops through weekdate to see if the task at i corresponds to any of the dates in weekdate
		for (int j = 0; j < weekSize; j++) {

			if (code == TODO_CODE) {
				if (!tempTask->getIsDone() && tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED && tempTask->isBetween(weekDate[j])) {
					tempTask->display();
					count++;
					break;
				}
				else {
					if (!tempTask->getIsDone() && tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED && tempTask->getStartDate()->operator==(weekDate[j])) {
						tempTask->display();
						count++;
						break;
					}
					else {
						if (!tempTask->getIsDone() && tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE && tempTask->getEndDate()->operator==(weekDate[j])) {
							tempTask->display();
							count++;
							break;
						}
						else {
							tempTask->hide();
						}
					}
				}
			}//end of TODO_CODE

			if (code == DONE_CODE) {
				if (tempTask->getIsDone() && tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED && tempTask->isBetween(weekDate[j])) {
					tempTask->display();
					count++;
					break;
				}
				else {
					if (tempTask->getIsDone() && tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED && tempTask->getStartDate()->operator==(weekDate[j])) {
						tempTask->display();
						count++;
						break;
					}
					else {
						if (tempTask->getIsDone() && tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE && tempTask->getEndDate()->operator==(weekDate[j])) {
							tempTask->display();
							count++;
							break;
						}
						else {
							tempTask->hide();
						}
					}
				}
			}//end of DONE_CODE

			if (code == ALL_CODE) {
				if (tempTask->getTaskTypeCode() == TASKTYPECODE_TIMED && tempTask->isBetween(weekDate[j])) {
					tempTask->display();
					count++;
					break;
				}
				else {
					if (tempTask->getTaskTypeCode() == TASKTYPECODE_PARTIALTIMED && tempTask->getStartDate()->operator==(weekDate[j])) {
						tempTask->display();
						count++;
						break;
					}
					else {
						if (tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE && tempTask->getEndDate()->operator==(weekDate[j])) {
							tempTask->display();
							count++;
							break;
						}
						else {
							tempTask->hide();
						}
					}
				}
			}//end of ALL_CODE

		}
	}
	return count;
}

int TextStorage::displayDeadlinedTasks() {
	int count = 0;
	unsigned int todoSize = _todoTasks->size();

	for (int i = 0; i < todoSize; i++) {
		Task* tempTask = _todoTasks->at(i);
		if (tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE) {
			tempTask->display();
			count++;
		}
		else {
			tempTask->hide();
		}
	}
	return count;
}

int TextStorage::displayDeadlinedTasks(int code, const Date &date) {
	int count = 0;
	unsigned int todoSize = _todoTasks->size();

	for (int i = 0; i < todoSize; i++) {
		Task* tempTask = _todoTasks->at(i);

		if (code == TODO_CODE) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE && !tempTask->getIsDone() && tempTask->getEndDate()->operator==(date)) {
				tempTask->display();
				count++;
			}
			else {
				tempTask->hide();
			}
		}

		if (code == DONE_CODE) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE && tempTask->getIsDone() && tempTask->getEndDate()->operator==(date)) {
				tempTask->display();
				count++;
			}
			else {
				tempTask->hide();
			}
		}

		if (code == ALL_CODE) {
			if (tempTask->getTaskTypeCode() == TASKTYPECODE_DEADLINE && tempTask->getEndDate()->operator==(date)) {
				tempTask->display();
				count++;
			}
			else {
				tempTask->hide();
			}
		}
	}

	return count;
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\TextStorage.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\timeDateInfo.cpp
	 */

#include "timeDateInfo.h"
#include <time.h>
#include "typeConversions.h"
#include "keywords.h"

//To do some logging just type your code then if there is an error just type ErrorLog::inputErrorLog(errorMessage)
//key in all error messages inside keywords.h as const std::strings
;
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\timeDateInfo.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\timeDateInfo.cpp
	 */

bool timeDateInfo::isMonthValid(std::string monthInput) {
	if (!typeConversions::isNumber(monthInput)) {
		return false;
	}
	int month = typeConversions::stringToInt(monthInput);
	if (month <= 0) {
		return false;
	}
	if (month > 12) {
		return false;
	}
	return true;
}

bool timeDateInfo::isYearValid(std::string yearInput) {
	if (!typeConversions::isNumber(yearInput)) {
		return false;
	}

	if (typeConversions::stringToInt(yearInput) < 1900) {
		return false;
	}

	return true;
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\timeDateInfo.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\timeDateInfo.cpp
	 */

bool timeDateInfo::isLeapYear(int year) {

	if (year < 1900) {
		year += 1900;
	}

	bool isLeap = false;

	if (year % 4 != 0) {
		isLeap = false;
	}
	else{
		if (year % 100 != 0) {
			isLeap = true;
		}
		else{
			if (year % 400 != 0) {
				isLeap = false;
			}
			else{
				isLeap = true;
			}
		}
	}

	return isLeap;
}


bool timeDateInfo::isStringANum(std::string str) {

	std::string::iterator iter = str.begin();
	while (iter != str.end() && isdigit(*iter)) {
		++iter;
	}

	return !str.empty() && iter == str.end();
}


std::string timeDateInfo::getDayStr(int iter) {
	const static std::string DAYS[] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

	return DAYS[iter];
}

std::string timeDateInfo::getLowerDayStr(int iter) {
	const static std::string DAYS[] = { "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" };

	return DAYS[iter];
}

std::string timeDateInfo::getShortDayStr(int iter) {
	const static std::string DAYS[] = { "Sun", "Mon", "Tue", "Wed", "Thurs", "Fri", "Sat" };

	return DAYS[iter];
}

std::string timeDateInfo::getShortLowerDayStr(int iter) {
	const static std::string DAYS[28] = { "sun", "mon", "tue", "wed", "thurs", "fri", "sat" };

	return DAYS[iter];
}

//returns the month in string form
//Argument: an int corresponding to the month, eg. 0=January, 1=February,..,11=December
std::string timeDateInfo::getMonthStr(int iter) {
	const static std::string MONTHS[MONTHS_IN_YEAR] = { "January", "February", "March", "April", "May",
		"June", "July", "August", "September", "October", "November", "December" };

	return MONTHS[iter];
}

std::string timeDateInfo::getLowerMonthStr(int iter) {
	const static std::string MONTHS[MONTHS_IN_YEAR] = { "january", "february", "march", "april", "may",
		"june", "july", "august", "september", "october", "november", "december" };

	return MONTHS[iter];
}


std::string timeDateInfo::getShortMonthStr(int iter) {
	const static std::string MONTHS[MONTHS_IN_YEAR] = { "Jan", "Feb", "Mar", "Apr", "May",
		"Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

	return MONTHS[iter];
}

std::string timeDateInfo::getShortLowerMonthStr(int iter) {
	const static std::string MONTHS[MONTHS_IN_YEAR] = { "jan", "feb", "mar", "apr", "may",
		"jun", "jul", "aug", "sep", "oct", "nov", "dec" };

	return MONTHS[iter];
}

int timeDateInfo::getDaysInMonth(int iter, int year) {
	int daysInMonth[MONTHS_IN_YEAR] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

	if ((iter == 1) && timeDateInfo::isLeapYear(year)) {
		daysInMonth[1] = 29;
	}

	return daysInMonth[iter];
}

struct tm* timeDateInfo::setStructTm(int year, int month, int day) {
	struct tm* timeinfo = setStructTm(year, month);
	timeinfo->tm_mday = day;
	mktime(timeinfo);
	return timeinfo;
}

struct tm* timeDateInfo::setStructTm(int year, int month) {
	struct tm* timeinfo = setStructTm(month);
	if (year >= 1900) {
		timeinfo->tm_year = year - 1900;
	}
	else {
		timeinfo->tm_year = year;
	}

	return timeinfo;
}

struct tm* timeDateInfo::setStructTm(int month) {
	struct tm* timeinfo = setStructTm();
	timeinfo->tm_mon = month;

	return timeinfo;
}

struct tm* timeDateInfo::setStructTm() {
	time_t rawtime;
	time(&rawtime);
	struct tm* timeinfo = localtime(&rawtime);

	return timeinfo;
}

struct tm* timeDateInfo::setDayStructTm(int day) {
	struct tm* timeinfo = setStructTm();
	timeinfo->tm_wday = day;

	return timeinfo;
}
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\timeDateInfo.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\timeDateInfo.h
	 */

#pragma once

#include <vector>
#include <time.h>

// DD, MM, YY length constant int declarations:
const int LENGTH_MDAYINPUT = 2;
const int LENGTH_MONTHINPUT = 2;
const int LENGTH_YEARINPUT = 2;

// Length of time input constant int declarations:
const int LENGTH_TIMEINPUT = 4;
const int LENGTH_HOURINPUT = 2;
const int LENGTH_MININPUT = 2;

// Leading 0 for date/time formatting constant string declaration:
const std::string leadingZero = "0";

// DD/MM/YY date input seperator constant string and index int declarations:
const int SIZE_SEPARATORSARRAY = 1;
const char SEPARATORS[SIZE_SEPARATORSARRAY] = { '/' };

const static std::string DAYSINPUT[14] = { "sunday", "sun", "monday", "mon", "tuesday", "tues", "wednesday", "wed", "thursday", "thurs", "friday", "fri", "saturday", "sat" };

namespace timeDateInfo {

	//checks if the mday, month and year number is valid
	//Argument: string in format of "DD", "MM", "YYYY"
	bool isMdayValid(std::string, int, int);	//Assumes month and year string inputs are valid.
	bool isMonthValid(std::string);
	bool isYearValid(std::string);

	//used to check whether time is within 0000 - 2359
	bool isTimeValid(std::string);
	bool isDayValid(std::string, int&);
	bool isLeapYear(int);
	bool isStringANum(std::string);

	std::string getMonthStr(int);
	std::string getLowerMonthStr(int);
	std::string getShortMonthStr(int);
	std::string getShortLowerMonthStr(int);

	std::string getDayStr(int);
	std::string getLowerDayStr(int);
	std::string getShortDayStr(int);
	std::string getShortLowerDayStr(int);

	//Arguments: 1) iter of the corresponding month, 0-Jan,..,11-Dec 2)year of the month
	//Returns: Number of days in the month
	int getDaysInMonth(int, int);

	//4 overloaded functions setStructTm
	//Arguments: 1=year, 2=month, 3=day
	struct tm* setStructTm(int year, int month, int day);
	//Arguments: 1=year, 2=month
	struct tm* setStructTm(int year, int month);
	//Arguments: month
	struct tm* setStructTm(int month);
	//Default time at the moment of using the application
	struct tm* setStructTm();

	struct tm* setDayStructTm(int);
};

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\timeDateInfo.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\typeConversions.cpp
	 */


#include "typeConversions.h"
#include <algorithm>

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\typeConversions.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\typeConversions.h
	 */

#pragma once

#include <string>
#include <fstream>
#include <sstream>

//This namespace is cater to any type conversions that might occur
namespace typeConversions{
	//StrH refers to String^
//	std::string convertStrTostr(System::String^); // Converts System::String^ into std::string
//	System::String^ convertstrToStr(std::string); // Converts std::string into System::String^

	int stringToInt(std::string str);
	std::string intToString(int i);
	bool isNumber(std::string str);

	std::string toLowerCase(std::string str);
	std::string trimExtraSpaces(std::string str);

//	void convertArrStrToConststrArr(array<System::String^>^, const char**, int);
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\ComCal_v0.1\typeConversions.h





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\systemTestOutput_ComCal\systemTestOutput_ComCal.cpp
	 */

#include <gtest\gtest.h>
#include "ComCalManager.h"
#include <queue>
#include <string>

class ComCalManagerTest : public ::testing::Test {
protected:
	//this is the setup method
	virtual void SetUp() {
		actual.push(ComCalManager::getInstance()->deduceCommand("add testTask .s 10/04/2015"));
		expected.push("Added: PARTIAL-TIMED task - [D]: testTask; [S]: 10/4/15 0000; ");

		actual.push(ComCalManager::getInstance()->deduceCommand("add testTask .s 10/04/2015 1500"));
		expected.push("Added: PARTIAL-TIMED task - [D]: testTask; [S]: 10/4/15 1500; ");

		actual.push(ComCalManager::getInstance()->deduceCommand("add testTask .s 21/04/2015 .e 22/04/2015 .l loc"));
		expected.push("Added: TIMED task - [D]: testTask; [S]: 21/4/15 0000; [E]: 22/4/15 0000; [L]: loc");

		actual.push(ComCalManager::getInstance()->deduceCommand("show may 2015"));
		expected.push("may 2015 shown");
	}

	//this functions acts like a dsetructor
	virtual void TearDown() {

	}

	std::queue<std::string> expected;
	std::queue<std::string> actual;
};

TEST_F(ComCalManagerTest, feedBackTest){
	int actualStage = 0;
	int expectedStage = expected.size();

	while (!expected.empty() && !actual.empty()) {

		if (expected.front() == actual.front()) {
			actualStage++;
		}
		actual.pop();
		expected.pop();
	}

	ASSERT_EQ(expectedStage, actualStage);
}

TEST(addTest, test1) {
	std::queue<std::string> expected;
	std::queue<std::string> actual;

	actual.push(ComCalManager::getInstance()->deduceCommand("add testTask .s 10/04/2015"));
	expected.push("Added: PARTIAL-TIMED task - [D]: testTask; [S]: 10/4/15 0000; ");

	ASSERT_EQ(expected.front(), actual.front());
}

TEST(addTest, test2) {
	std::queue<std::string> expected;
	std::queue<std::string> actual;

	actual.push(ComCalManager::getInstance()->deduceCommand("add testTask .s 10/04/2015 1500"));
	expected.push("Added: PARTIAL-TIMED task - [D]: testTask; [S]: 10/4/15 1500; ");

	ASSERT_EQ(expected.front(), actual.front());
}

TEST(addTest, test3) {
	std::queue<std::string> expected;
	std::queue<std::string> actual;

	actual.push(ComCalManager::getInstance()->deduceCommand("add testTask .s 21/04/2015 .e 22/04/2015 .l loc"));
	expected.push("Added: TIMED task - [D]: testTask; [S]: 21/4/15 0000; [E]: 22/4/15 0000; [L]: loc");

	ASSERT_EQ(expected.front(), actual.front());
}

TEST(showTest, test4) {
	std::queue<std::string> expected;
	std::queue<std::string> actual;

	actual.push(ComCalManager::getInstance()->deduceCommand("show may 2015"));
	expected.push("may 2015 shown");

	ASSERT_EQ(expected.front(), actual.front());
}

TEST(showTest, test5) {
	std::queue<std::string> expected;
	std::queue<std::string> actual;

	actual.push(ComCalManager::getInstance()->deduceCommand("show week"));
	expected.push("Current week shown");

	ASSERT_EQ(expected.front(), actual.front());
}

TEST(showTest, test6) {
	std::queue<std::string> expected;
	std::queue<std::string> actual;

	actual.push(ComCalManager::getInstance()->deduceCommand("show week 22/04/2015"));
	expected.push("22/4/15 week tasks shown");

	ASSERT_EQ(expected.front(), actual.front());
}
	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\systemTestOutput_ComCal\systemTestOutput_ComCal.cpp





	/**
	 * origin: C:\Users\RachH\Desktop\120315-ComCal\systemTest_ComCal\systemTest_ComCal.cpp
	 */

#include <gtest\gtest.h>
#include "ComCalManager.h"
#include "TextStorage.h"
#include <queue>
#include <string>
#define TESTMODE

class ComCalManagerTest : public ::testing::Test {
protected:
	//this is the setup method
	virtual void SetUp() {
		ComCalManager::getInstance()->deduceCommand("delete all");

		actual.push(ComCalManager::getInstance()->deduceCommand("add archery .s 10/04/2015"));
		expected.push("Added: PARTIAL-TIMED task - [D]: \"archery\"; [S]: 10/04/2015");

		actual.push(ComCalManager::getInstance()->deduceCommand("add testTask .s 10/05/2015 1500"));
		expected.push("Added: PARTIAL-TIMED task - [D]: \"testTask\"; [S]: 10/05/2015 1500");

		actual.push(ComCalManager::getInstance()->deduceCommand("add soccer .s 21/04/2015 .e 22/05/2015 .l loc"));
		expected.push("Added: TIMED task - [D]: \"soccer\"; [S]: 21/04/2015; [E]: 22/05/2015; [L]: \"loc\"");

		actual.push(ComCalManager::getInstance()->deduceCommand("show may 2015"));
		expected.push("may 2015 (Show count: 2)");

		actual.push(ComCalManager::getInstance()->deduceCommand("edit 2 .s 15/04/2015"));
		expected.push("Edited [S] of EVENT (2):[D]: \"testTask\"; [S]: 15/04/2015");

		actual.push(ComCalManager::getInstance()->deduceCommand("add play .s 10/12/2018 1500 .e 21/06/2020 .l nus"));
		expected.push("Added: TIMED task - [D]: \"play\"; [S]: 10/12/2018 1500; [E]: 21/06/2020; [L]: \"nus\"");

		actual.push(ComCalManager::getInstance()->deduceCommand("show 15/04/2015"));
		expected.push("15/04/2015 tasks (Show count: 1)");

		actual.push(ComCalManager::getInstance()->deduceCommand("edit 2 .s -"));
		expected.push("Edited [S-D] of EVENT to TO-DO (2): [D]: \"testTask\"");

		actual.push(ComCalManager::getInstance()->deduceCommand("show 15/04/2015"));
		expected.push("There are zero show results");

		actual.push(ComCalManager::getInstance()->deduceCommand("show week 19/02/2019"));
		expected.push("19/02/2019 weekTasks (Show count: 1)");

		actual.push(ComCalManager::getInstance()->deduceCommand("search nus"));
		expected.push("Executed search of: (nus )");

		actual.push(ComCalManager::getInstance()->deduceCommand("delete 1 3"));
		expected.push("Deleted task(s): (1), (3).");

		actual.push(ComCalManager::getInstance()->deduceCommand("show"));
		expected.push("There are zero show results");

		actual.push(ComCalManager::getInstance()->deduceCommand("add some old war .s 10/14/1890 1500 .e 04/07/1700 .l nus"));
		expected.push("Invalid add command: Invalid start date and time format (please enter: DD/MM/YYYY HHMM)");

		actual.push(ComCalManager::getInstance()->deduceCommand("add freedom day .s 04/07/2015 20000 .e 04/07/2015   1900 .l nus"));
		expected.push("Invalid add command: Invalid start date and time format (please enter: DD/MM/YYYY HHMM)");

		actual.push(ComCalManager::getInstance()->deduceCommand("done 2"));
		expected.push("Marked completed task(s): (2).");

		actual.push(ComCalManager::getInstance()->deduceCommand("show done"));
		expected.push("All done tasks shown in sideBar (Show count: 1)");

		actual.push(ComCalManager::getInstance()->deduceCommand("show todo"));
		expected.push("All todo tasks shown in sideBar (Show count: 1)");

		actual.push(ComCalManager::getInstance()->deduceCommand("add april's fool .s 01/04/2015 1500"));
		expected.push("Added: PARTIAL-TIMED task - [D]: \"april's fool\"; [S]: 01/04/2015 1500");

		actual.push(ComCalManager::getInstance()->deduceCommand("add april may die .s 01/04/2015 1500 .e 05/04/2015 1600 .l waterpark"));
		expected.push("Added: TIMED task - [D]: \"april may die\"; [S]: 01/04/2015 1500; [E]: 05/04/2015 1600; [L]: \"waterpark\"");

		actual.push(ComCalManager::getInstance()->deduceCommand("add apr...on .e 26/04/2015 1500"));
		expected.push("Added: DEADLINE task - [D]: \"apr...on\"; [E]: 26/04/2015 1500");

		actual.push(ComCalManager::getInstance()->deduceCommand("add exe. .d scorpion from 10/04/2015 1500 to 13/04/2015 1600 .l waterpark"));
		expected.push("Added: TIMED task - [D]: \"scorpion\"; [S]: 10/04/2015 1500; [E]: 13/04/2015 1600; [L]: \"waterpark\"");

		actual.push(ComCalManager::getInstance()->deduceCommand("show week 08/04/2015"));
		expected.push("08/04/2015 weekTasks (Show count: 2)");

		actual.push(ComCalManager::getInstance()->deduceCommand("add C'mon april baby .s 15/04/2015 1500"));
		expected.push("Added: PARTIAL-TIMED task - [D]: \"C'mon april baby\"; [S]: 15/04/2015 1500");

		actual.push(ComCalManager::getInstance()->deduceCommand("redo"));
		expected.push("Error: No previous undo actions to redo.");

		actual.push(ComCalManager::getInstance()->deduceCommand("done 6"));
		expected.push("Marked completed task(s): (6).");
	}

	//this functions acts like a dsetructor
	virtual void TearDown() {

	}

	std::queue<std::string> expected;
	std::queue<std::string> actual;
};

class ShowFunctionTest : public ::testing::Test{
protected:
	//this is the setup method
	virtual void SetUp() {
		ComCalManager::getInstance()->deduceCommand("delete all");

		ComCalManager::getInstance()->deduceCommand("add archery .s 10/04/2015");
		ComCalManager::getInstance()->deduceCommand("add testTask .s 10/05/2015 1500");
		ComCalManager::getInstance()->deduceCommand("add soccer .s 21/04/2015 .e 22/05/2015 .l loc");
		ComCalManager::getInstance()->deduceCommand("add play .s 10/12/2018 1500 .e 21/06/2020 .l nus");
		ComCalManager::getInstance()->deduceCommand("add freedom   day .s   04/07/2015 20000 .e 04/07/2015   2300 .l nus");
		ComCalManager::getInstance()->deduceCommand("add april's fool .s 01/04/2015 1500");
		ComCalManager::getInstance()->deduceCommand("add I wanna watch GoT .s 03/04/2015 1500");
		ComCalManager::getInstance()->deduceCommand("add april may die .s 01/04/2015 1500 .e 05/04/2015 1600 .l waterpark");
		ComCalManager::getInstance()->deduceCommand("add apr...on .e 26/04/2015 1500");
		ComCalManager::getInstance()->deduceCommand("add exe. .d scorpion from 10/04/2015 1500 to 13/04/2015 1600 .l waterpark");
		ComCalManager::getInstance()->deduceCommand("add C'mon april baby .s 15/04/2015 1500");
		ComCalManager::getInstance()->deduceCommand("done 6");
	}

	virtual void TearDown() {

	}
};

class SearchFunctionTest : public ::testing::Test{
protected:
	//this is the setup method
	virtual void SetUp() {
		ComCalManager::getInstance()->deduceCommand("delete all");

		ComCalManager::getInstance()->deduceCommand("add archery .s 10/04/2015");
		ComCalManager::getInstance()->deduceCommand("add testTask .s 10/05/2015 1500");
		ComCalManager::getInstance()->deduceCommand("add soccer .s 21/04/2015 .e 22/05/2015 .l loc");
		ComCalManager::getInstance()->deduceCommand("add play .s 10/12/2018 1500 .e 21/06/2020 .l nus");
		ComCalManager::getInstance()->deduceCommand("add freedom   day .s   04/07/2015 2000 .e 04/07/2015   2300 .l nus");
		ComCalManager::getInstance()->deduceCommand("add april's fool .s 01/04/2015 1500");
		ComCalManager::getInstance()->deduceCommand("add I wanna watch GoT .s 03/04/2015 1500");
		ComCalManager::getInstance()->deduceCommand("add april may die .s 01/04/2015 1500 .e 05/04/2015 1600 .l waterpark");
		ComCalManager::getInstance()->deduceCommand("add apr...on .e 26/04/2015 1500");
		ComCalManager::getInstance()->deduceCommand("add exe. .d scorpion from 10/04/2015 1500 to 13/04/2015 1600 .l waterpark");
		ComCalManager::getInstance()->deduceCommand("add C'mon april baby .s 15/04/2015 1500");
		ComCalManager::getInstance()->deduceCommand("done 6");
	}

	virtual void TearDown() {

	}
};

TEST_F(ShowFunctionTest, showDone) {
	int expected = 1;
	int actual = 0;
	Task* tempTask;
	TextStorage::getInstance()->displayDoneTasks();
	unsigned int size = TextStorage::getInstance()->getNumberOfTasks();

	for (int i = 0; i < size; i++) {
		tempTask = TextStorage::getInstance()->getTask(i);
		if (!tempTask->isHidden()) {
			actual++;
		}
	}

	ASSERT_EQ(expected, actual);
}

TEST_F(ShowFunctionTest, showTodo) {
	int expected = 1;
	int actual = 0;
	Task* tempTask;
	TextStorage::getInstance()->displayTodoTasks();
	unsigned int size = TextStorage::getInstance()->getNumberOfTasks();

	for (int i = 0; i < size; i++) {
		tempTask = TextStorage::getInstance()->getTask(i);
		if (tempTask->isHidden()) {
			actual++;
		}
	}

	ASSERT_EQ(expected, actual);
}

TEST_F(ShowFunctionTest, showDate) {
	Date * testDate = new Date();
	testDate->setDate("03/04/2015");
	Task * tempTask;
	int actual = 0;
	int expected = 2;

	TextStorage::getInstance()->displayDatedTasks(ALL_CODE, *testDate);
	unsigned int size = TextStorage::getInstance()->getNumberOfTasks();

	for (int i = 0; i < size; i++) {
		tempTask = TextStorage::getInstance()->getTask(i);
		
		if (!tempTask->isHidden()) {
			actual++;
		}
	}

	ASSERT_EQ(expected, actual);

	delete testDate;
	testDate = nullptr;
}

TEST_F(ComCalManagerTest, feedBackTest){
	int actualStage = 0;
	int expectedStage = expected.size();

	while (!expected.empty() && !actual.empty()) {

		if (expected.front() == actual.front()) {
			actualStage++;
		}
		actual.pop();
		expected.pop();
	}

	ASSERT_EQ(expectedStage, actualStage);
}

TEST(addTest, test1) {
	std::queue<std::string> expected;
	std::queue<std::string> actual;

	ComCalManager::getInstance()->deduceCommand("delete all");

	actual.push(ComCalManager::getInstance()->deduceCommand("add archery .s 10/04/2015"));
	expected.push("Added: PARTIAL-TIMED task - [D]: \"archery\"; [S]: 10/04/2015");
	

	ASSERT_EQ(expected.front(), actual.front());
}

TEST(addTest, test2) {
	std::queue<std::string> expected;
	std::queue<std::string> actual;

	ComCalManager::getInstance()->deduceCommand("delete all");

	actual.push(ComCalManager::getInstance()->deduceCommand("add testTask .s 10/05/2015 1500"));
	expected.push("Added: PARTIAL-TIMED task - [D]: \"testTask\"; [S]: 10/05/2015 1500");

	ASSERT_EQ(expected.front(), actual.front());
}

TEST(addTest, test3) {
	std::queue<std::string> expected;
	std::queue<std::string> actual;

	ComCalManager::getInstance()->deduceCommand("delete all");

	actual.push(ComCalManager::getInstance()->deduceCommand("add soccer .s 21/04/2015 .e 22/05/2015 .l loc"));
	expected.push("Added: TIMED task - [D]: \"soccer\"; [S]: 21/04/2015; [E]: 22/05/2015; [L]: \"loc\"");

	ASSERT_EQ(expected.front(), actual.front());
}

TEST(addTest, test4) {
	std::queue<std::string> expected;
	std::queue<std::string> actual;

	ComCalManager::getInstance()->deduceCommand("delete all");

	actual.push(ComCalManager::getInstance()->deduceCommand("add play .s 10/12/2018 1500 .e 21/06/2020 .l nus"));
	expected.push("Added: TIMED task - [D]: \"play\"; [S]: 10/12/2018 1500; [E]: 21/06/2020; [L]: \"nus\"");

	ASSERT_EQ(expected.front(), actual.front());
}

	// End of segment: C:\Users\RachH\Desktop\120315-ComCal\systemTest_ComCal\systemTest_ComCal.cpp





