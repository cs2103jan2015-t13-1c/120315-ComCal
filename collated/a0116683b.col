//@author: a0116683b



	/**
	 * origin: ComCal_v0.1\Load.cpp
	 */

// Load.cpp
// Implementation of functions in the Load class

#include "Load.h"

Load::Load() : Command() {
}

Load::~Load() {
}

std::string Load::execute(std::string argument) {
	if (argument.compare("") == 0) {
		argument = TextStorage::getInstance()->getTodoFileName();
	}
	if (TextStorage::getInstance()->loadTasks(argument)) {
		return ("Tasks loaded from " + argument + " successfully.");
	}
	return ("Loading failed. File " + argument + " does not exist.");
}
	// End of segment: ComCal_v0.1\Load.cpp





	/**
	 * origin: ComCal_v0.1\Load.h
	 */

// Load.h
// Subclass of Command; implements the load function

#pragma once

#include "Command.h"
#include "TextStorage.h"

class Load : public Command {
public:
	Load();
	~Load();
	std::string execute(std::string argument);
};
	// End of segment: ComCal_v0.1\Load.h





	/**
	 * origin: ComCal_v0.1\Save.cpp
	 */

// Save.cpp
// Implementation of functions in the Save class

#include "Save.h"

Save::Save() : Command() {
}

Save::~Save() {
}

std::string Save::execute(std::string argument) {
	if (argument.compare("") == 0) {
		argument = TextStorage::getInstance()->getTodoFileName();
	}
	if (TextStorage::getInstance()->saveTasks(argument)) {
		return ("Tasks saved to " + argument + " successfully.");
	}
	return ("Failed to save to " + argument);
}
	// End of segment: ComCal_v0.1\Save.cpp





	/**
	 * origin: ComCal_v0.1\Save.h
	 */

// Save.h
// Subclass of Command; implements the save function

#pragma once

#include "Command.h"
#include "TextStorage.h"

class Save : public Command {
public:
	Save();
	~Save();
	std::string execute(std::string argument);
};
	// End of segment: ComCal_v0.1\Save.h





	/**
	 * origin: ComCal_v0.1\TextStorage.cpp
	 */

bool TextStorage::saveTasks(std::string fileName)
{
	xml_document<> xmlDocument;
	std::ofstream saveFile(fileName);
	if (!saveFile.is_open()) {
		return false;
	}

	xml_node<>* xmlDeclarationNode = xmlDocument.allocate_node(node_declaration);
	xmlDeclarationNode->append_attribute(xmlDocument.allocate_attribute("version", "1.0"));
	xmlDeclarationNode->append_attribute(xmlDocument.allocate_attribute("encoding", "utf-8"));
	xmlDocument.append_node(xmlDeclarationNode);

	Task* tempTask;
	Date* tempDate;
	xml_node<>* taskNode;
	xml_node<>* detailsNode;
	xml_node<>* dateNode;

	for (unsigned int i = 0; i < _todoTasks->size(); i++) {
		tempTask = _todoTasks->at(i);
		taskNode = xmlDocument.allocate_node(node_element, "task");
		xmlDocument.append_node(taskNode);

		detailsNode = xmlDocument.allocate_node(node_element, "description");
		detailsNode->value(xmlDocument.allocate_string(tempTask->getDescription().c_str()));
		taskNode->append_node(detailsNode);

		detailsNode = xmlDocument.allocate_node(node_element, "location");
		detailsNode->value(xmlDocument.allocate_string(tempTask->getLocation().c_str()));
		taskNode->append_node(detailsNode);

		for (int i = 0; i < 2; i++)
		{
			if (((i == 0) && tempTask->hasStartDate()) || ((i == 1) && tempTask->hasEndDate()))
			{
				tempDate = (i == 0) ? tempTask->getStartDate() : tempTask->getEndDate();

				detailsNode = xmlDocument.allocate_node(node_element, (i == 0) ? "startDate" : "endDate");
				detailsNode->value(tempTask->getLocation().c_str());
				taskNode->append_node(detailsNode);

				dateNode = xmlDocument.allocate_node(node_element, "day");
				dateNode->value(xmlDocument.allocate_string(typeConversions::intToString(tempDate->getDay()).c_str()));
				detailsNode->append_node(dateNode);

				dateNode = xmlDocument.allocate_node(node_element, "month");
				dateNode->value(xmlDocument.allocate_string(typeConversions::intToString(tempDate->getMonth()).c_str()));
				detailsNode->append_node(dateNode);

				dateNode = xmlDocument.allocate_node(node_element, "year");
				dateNode->value(xmlDocument.allocate_string(typeConversions::intToString(tempDate->getYear()+1900).c_str()));
				detailsNode->append_node(dateNode);

				dateNode = xmlDocument.allocate_node(node_element, "time");
				dateNode->value(xmlDocument.allocate_string(typeConversions::intToString(tempDate->getTime()).c_str()));
				detailsNode->append_node(dateNode);
			}
		}

		detailsNode = xmlDocument.allocate_node(node_element, "isDone");
		detailsNode->value(tempTask->getIsDone() ? "true" : "false");
		taskNode->append_node(detailsNode);
	}

	std::string sXml;
	print(back_inserter(sXml), xmlDocument);
 
	saveFile << sXml;
	saveFile.close();

	return true;
}

bool TextStorage::loadTasks(std::string fileName)
{
	_todoTasks->clear();

	xml_document<> xmlDocument;

	std::ifstream loadFile(fileName);
	if (!loadFile.is_open()) {
		return false;
	}

	std::vector<char> buffer((std::istreambuf_iterator<char>(loadFile)), std::istreambuf_iterator<char>());
	buffer.push_back('\0');

	xmlDocument.parse<0>(&buffer[0]);

	std::string description;
	std::string location;
	std::string isDone;
	Date* startDate;
	Date* endDate;
	int day;
	int month;
	int year;
	int time;
	Task* task;
	xml_node<>* dateNode;

	for (xml_node<>* taskNode = xmlDocument.first_node("task"); taskNode != NULL; taskNode = taskNode->next_sibling()) {
		description = taskNode->first_node("description")->value();
		location = taskNode->first_node("location")->value();
		isDone = taskNode->first_node("isDone")->value();

		startDate = NULL;
		endDate = NULL;
		for (int i = 0; i < 2; i++) {
			if (i == 0) {
				dateNode = taskNode->first_node("startDate");
			}
			else {
				dateNode = taskNode->first_node("endDate");
			}
			if (dateNode != NULL) {
				day = typeConversions::stringToInt(dateNode->first_node("day")->value());
				month = typeConversions::stringToInt(dateNode->first_node("month")->value());
				year = typeConversions::stringToInt(dateNode->first_node("year")->value());
				time = typeConversions::stringToInt(dateNode->first_node("time")->value());
				if (i == 0) {
					startDate = new Date(day, month, year-1900, time);
				}
				else {
					endDate = new Date(day, month, year-1900, time);
				}
			}
		}
		
		task = new Task(description, location, startDate, endDate);
		if (isDone.compare("true") == 0) {
			task->done();
		}
		_todoTasks->push_back(task);
	}

	return true;
}
	// End of segment: ComCal_v0.1\TextStorage.cpp





